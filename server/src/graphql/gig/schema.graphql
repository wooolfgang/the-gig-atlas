type Query {
  gig(id: ID!): Gig
  gigs(
    where: GigWhereInput
    orderBy: GigOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Gig]!
  searchGigs(search: String!, where: SearchOptions): GigSearch!
  gigsListLanding: [Gig]!
  nextPage(ids: [ID!]!): [Gig]!
}

type Mutation {
  createGig(gig: GigInput!, employer: EmployerInput!): Gig
  deleteGig(id: ID): Gig
}

type Gig {
  id: ID
  createdAt: DateTime
  title: String
  description: String
  tags: [Tag!]!
  projectType: ProjectType
  paymentType: PaymentType
  jobType: JobType
  minFee: Float
  maxFee: Float
  locationRestriction: String
  employer: Employer
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  media: File
  status: GigStatus
  from: GigSource
}

input GigInput {
  title: String!
  description: String!
  tags: [String]!
  projectType: ProjectType!
  paymentType: PaymentType!
  minFee: Float!
  maxFee: Float!
  jobType: JobType!
  locationRestriction: String
  communicationType: GigCommunicationType!
  communicationEmail: String
  communicationWebsite: String
}

input SearchOptions {
  first: Int
  skip: Int
  jobs: [JobType]
  projects: [ProjectType]
  payments: [PaymentType]
}

type GigSearch {
  gigs: [Gig]!
  ids: [String]!
}
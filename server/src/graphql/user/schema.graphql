type Query {
  user: User!
  getUser (where: UserWhereUniqueInput!): User!
}

type Mutation {
  deleteUser(id: ID!): Boolean!
  onboardingPersonal(input: PersonalInput!): User!
  onboardingEmployer(input: EmployerOnboardbIn!): User!
  onboardingFreelancer(input: FreelancerOnboardIn!): User!
}

type User {
  id: ID
  firstName: String
  lastName: String
  email: String
  role: UserRole
  createdAt: Date
  asEmployer: Employer
  asFreelancer: Freelancer
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep # type taken from generated
  avatar: File
}

enum AccountType {
  FREELANCER
  EMPLOYER
}

input PersonalInput {
  firstName: String!
  lastName: String!
  accountType: AccountType!
  avatarFileId: ID!
}

input EmployerOnboardbIn {
  employerType: EmployerType! # get from generated
  displayName: String!
  email: String!
  introduction: String
  website: String
  avatarFileId: String
}

input FreelancerOnboardIn {
  bio: String
  website: String
  location: String
  socials: [SocialInput!]!
  portfolio: [PortfolioInput!]!
  skills: [String!]!
}
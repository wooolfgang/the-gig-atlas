// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  employer: (where?: EmployerWhereInput) => Promise<boolean>;
  gig: (where?: GigWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  employer: (where: EmployerWhereUniqueInput) => EmployerNullablePromise;
  employers: (args?: {
    where?: EmployerWhereInput;
    orderBy?: EmployerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Employer>;
  employersConnection: (args?: {
    where?: EmployerWhereInput;
    orderBy?: EmployerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmployerConnectionPromise;
  gig: (where: GigWhereUniqueInput) => GigNullablePromise;
  gigs: (args?: {
    where?: GigWhereInput;
    orderBy?: GigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Gig>;
  gigsConnection: (args?: {
    where?: GigWhereInput;
    orderBy?: GigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GigConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEmployer: (data: EmployerCreateInput) => EmployerPromise;
  updateEmployer: (args: {
    data: EmployerUpdateInput;
    where: EmployerWhereUniqueInput;
  }) => EmployerPromise;
  updateManyEmployers: (args: {
    data: EmployerUpdateManyMutationInput;
    where?: EmployerWhereInput;
  }) => BatchPayloadPromise;
  upsertEmployer: (args: {
    where: EmployerWhereUniqueInput;
    create: EmployerCreateInput;
    update: EmployerUpdateInput;
  }) => EmployerPromise;
  deleteEmployer: (where: EmployerWhereUniqueInput) => EmployerPromise;
  deleteManyEmployers: (where?: EmployerWhereInput) => BatchPayloadPromise;
  createGig: (data: GigCreateInput) => GigPromise;
  updateGig: (args: {
    data: GigUpdateInput;
    where: GigWhereUniqueInput;
  }) => GigPromise;
  updateManyGigs: (args: {
    data: GigUpdateManyMutationInput;
    where?: GigWhereInput;
  }) => BatchPayloadPromise;
  upsertGig: (args: {
    where: GigWhereUniqueInput;
    create: GigCreateInput;
    update: GigUpdateInput;
  }) => GigPromise;
  deleteGig: (where: GigWhereUniqueInput) => GigPromise;
  deleteManyGigs: (where?: GigWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  employer: (
    where?: EmployerSubscriptionWhereInput
  ) => EmployerSubscriptionPayloadSubscription;
  gig: (
    where?: GigSubscriptionWhereInput
  ) => GigSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserRole = "ADMIN" | "MEMBER";

export type EmployerType = "PERSONAL" | "COMPANY";

export type ProjectType =
  | "GREENFIELD"
  | "MAINTENANCE"
  | "CONSULTING"
  | "TESTING";

export type PaymentType = "HOURLY" | "FIXED";

export type JobType = "FULL_TIME" | "PART_TIME" | "CONTRACT";

export type GigOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "projectType_ASC"
  | "projectType_DESC"
  | "paymentType_ASC"
  | "paymentType_DESC"
  | "minFee_ASC"
  | "minFee_DESC"
  | "maxFee_ASC"
  | "maxFee_DESC"
  | "jobType_ASC"
  | "jobType_DESC"
  | "locationRestriction_ASC"
  | "locationRestriction_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type EmployerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "employerType_ASC"
  | "employerType_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EmployerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GigWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  projectType?: Maybe<ProjectType>;
  projectType_not?: Maybe<ProjectType>;
  projectType_in?: Maybe<ProjectType[] | ProjectType>;
  projectType_not_in?: Maybe<ProjectType[] | ProjectType>;
  paymentType?: Maybe<PaymentType>;
  paymentType_not?: Maybe<PaymentType>;
  paymentType_in?: Maybe<PaymentType[] | PaymentType>;
  paymentType_not_in?: Maybe<PaymentType[] | PaymentType>;
  minFee?: Maybe<Float>;
  minFee_not?: Maybe<Float>;
  minFee_in?: Maybe<Float[] | Float>;
  minFee_not_in?: Maybe<Float[] | Float>;
  minFee_lt?: Maybe<Float>;
  minFee_lte?: Maybe<Float>;
  minFee_gt?: Maybe<Float>;
  minFee_gte?: Maybe<Float>;
  maxFee?: Maybe<Float>;
  maxFee_not?: Maybe<Float>;
  maxFee_in?: Maybe<Float[] | Float>;
  maxFee_not_in?: Maybe<Float[] | Float>;
  maxFee_lt?: Maybe<Float>;
  maxFee_lte?: Maybe<Float>;
  maxFee_gt?: Maybe<Float>;
  maxFee_gte?: Maybe<Float>;
  jobType?: Maybe<JobType>;
  jobType_not?: Maybe<JobType>;
  jobType_in?: Maybe<JobType[] | JobType>;
  jobType_not_in?: Maybe<JobType[] | JobType>;
  locationRestriction?: Maybe<String>;
  locationRestriction_not?: Maybe<String>;
  locationRestriction_in?: Maybe<String[] | String>;
  locationRestriction_not_in?: Maybe<String[] | String>;
  locationRestriction_lt?: Maybe<String>;
  locationRestriction_lte?: Maybe<String>;
  locationRestriction_gt?: Maybe<String>;
  locationRestriction_gte?: Maybe<String>;
  locationRestriction_contains?: Maybe<String>;
  locationRestriction_not_contains?: Maybe<String>;
  locationRestriction_starts_with?: Maybe<String>;
  locationRestriction_not_starts_with?: Maybe<String>;
  locationRestriction_ends_with?: Maybe<String>;
  locationRestriction_not_ends_with?: Maybe<String>;
  employer?: Maybe<EmployerWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GigWhereInput[] | GigWhereInput>;
  OR?: Maybe<GigWhereInput[] | GigWhereInput>;
  NOT?: Maybe<GigWhereInput[] | GigWhereInput>;
}

export interface EmployerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  asUser?: Maybe<UserWhereInput>;
  employerType?: Maybe<EmployerType>;
  employerType_not?: Maybe<EmployerType>;
  employerType_in?: Maybe<EmployerType[] | EmployerType>;
  employerType_not_in?: Maybe<EmployerType[] | EmployerType>;
  gigs_every?: Maybe<GigWhereInput>;
  gigs_some?: Maybe<GigWhereInput>;
  gigs_none?: Maybe<GigWhereInput>;
  AND?: Maybe<EmployerWhereInput[] | EmployerWhereInput>;
  OR?: Maybe<EmployerWhereInput[] | EmployerWhereInput>;
  NOT?: Maybe<EmployerWhereInput[] | EmployerWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<UserRole>;
  role_not?: Maybe<UserRole>;
  role_in?: Maybe<UserRole[] | UserRole>;
  role_not_in?: Maybe<UserRole[] | UserRole>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  asEmployer?: Maybe<EmployerWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type GigWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface EmployerCreateInput {
  id?: Maybe<ID_Input>;
  asUser: UserCreateOneWithoutAsEmployerInput;
  employerType: EmployerType;
  gigs?: Maybe<GigCreateManyWithoutEmployerInput>;
}

export interface UserCreateOneWithoutAsEmployerInput {
  create?: Maybe<UserCreateWithoutAsEmployerInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAsEmployerInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  role: UserRole;
}

export interface GigCreateManyWithoutEmployerInput {
  create?: Maybe<
    GigCreateWithoutEmployerInput[] | GigCreateWithoutEmployerInput
  >;
  connect?: Maybe<GigWhereUniqueInput[] | GigWhereUniqueInput>;
}

export interface GigCreateWithoutEmployerInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  technologies?: Maybe<GigCreatetechnologiesInput>;
  projectType: ProjectType;
  paymentType: PaymentType;
  minFee: Float;
  maxFee: Float;
  jobType: JobType;
  locationRestriction?: Maybe<String>;
}

export interface GigCreatetechnologiesInput {
  set?: Maybe<String[] | String>;
}

export interface EmployerUpdateInput {
  asUser?: Maybe<UserUpdateOneRequiredWithoutAsEmployerInput>;
  employerType?: Maybe<EmployerType>;
  gigs?: Maybe<GigUpdateManyWithoutEmployerInput>;
}

export interface UserUpdateOneRequiredWithoutAsEmployerInput {
  create?: Maybe<UserCreateWithoutAsEmployerInput>;
  update?: Maybe<UserUpdateWithoutAsEmployerDataInput>;
  upsert?: Maybe<UserUpsertWithoutAsEmployerInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAsEmployerDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
}

export interface UserUpsertWithoutAsEmployerInput {
  update: UserUpdateWithoutAsEmployerDataInput;
  create: UserCreateWithoutAsEmployerInput;
}

export interface GigUpdateManyWithoutEmployerInput {
  create?: Maybe<
    GigCreateWithoutEmployerInput[] | GigCreateWithoutEmployerInput
  >;
  delete?: Maybe<GigWhereUniqueInput[] | GigWhereUniqueInput>;
  connect?: Maybe<GigWhereUniqueInput[] | GigWhereUniqueInput>;
  set?: Maybe<GigWhereUniqueInput[] | GigWhereUniqueInput>;
  disconnect?: Maybe<GigWhereUniqueInput[] | GigWhereUniqueInput>;
  update?: Maybe<
    | GigUpdateWithWhereUniqueWithoutEmployerInput[]
    | GigUpdateWithWhereUniqueWithoutEmployerInput
  >;
  upsert?: Maybe<
    | GigUpsertWithWhereUniqueWithoutEmployerInput[]
    | GigUpsertWithWhereUniqueWithoutEmployerInput
  >;
  deleteMany?: Maybe<GigScalarWhereInput[] | GigScalarWhereInput>;
  updateMany?: Maybe<
    GigUpdateManyWithWhereNestedInput[] | GigUpdateManyWithWhereNestedInput
  >;
}

export interface GigUpdateWithWhereUniqueWithoutEmployerInput {
  where: GigWhereUniqueInput;
  data: GigUpdateWithoutEmployerDataInput;
}

export interface GigUpdateWithoutEmployerDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  technologies?: Maybe<GigUpdatetechnologiesInput>;
  projectType?: Maybe<ProjectType>;
  paymentType?: Maybe<PaymentType>;
  minFee?: Maybe<Float>;
  maxFee?: Maybe<Float>;
  jobType?: Maybe<JobType>;
  locationRestriction?: Maybe<String>;
}

export interface GigUpdatetechnologiesInput {
  set?: Maybe<String[] | String>;
}

export interface GigUpsertWithWhereUniqueWithoutEmployerInput {
  where: GigWhereUniqueInput;
  update: GigUpdateWithoutEmployerDataInput;
  create: GigCreateWithoutEmployerInput;
}

export interface GigScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  projectType?: Maybe<ProjectType>;
  projectType_not?: Maybe<ProjectType>;
  projectType_in?: Maybe<ProjectType[] | ProjectType>;
  projectType_not_in?: Maybe<ProjectType[] | ProjectType>;
  paymentType?: Maybe<PaymentType>;
  paymentType_not?: Maybe<PaymentType>;
  paymentType_in?: Maybe<PaymentType[] | PaymentType>;
  paymentType_not_in?: Maybe<PaymentType[] | PaymentType>;
  minFee?: Maybe<Float>;
  minFee_not?: Maybe<Float>;
  minFee_in?: Maybe<Float[] | Float>;
  minFee_not_in?: Maybe<Float[] | Float>;
  minFee_lt?: Maybe<Float>;
  minFee_lte?: Maybe<Float>;
  minFee_gt?: Maybe<Float>;
  minFee_gte?: Maybe<Float>;
  maxFee?: Maybe<Float>;
  maxFee_not?: Maybe<Float>;
  maxFee_in?: Maybe<Float[] | Float>;
  maxFee_not_in?: Maybe<Float[] | Float>;
  maxFee_lt?: Maybe<Float>;
  maxFee_lte?: Maybe<Float>;
  maxFee_gt?: Maybe<Float>;
  maxFee_gte?: Maybe<Float>;
  jobType?: Maybe<JobType>;
  jobType_not?: Maybe<JobType>;
  jobType_in?: Maybe<JobType[] | JobType>;
  jobType_not_in?: Maybe<JobType[] | JobType>;
  locationRestriction?: Maybe<String>;
  locationRestriction_not?: Maybe<String>;
  locationRestriction_in?: Maybe<String[] | String>;
  locationRestriction_not_in?: Maybe<String[] | String>;
  locationRestriction_lt?: Maybe<String>;
  locationRestriction_lte?: Maybe<String>;
  locationRestriction_gt?: Maybe<String>;
  locationRestriction_gte?: Maybe<String>;
  locationRestriction_contains?: Maybe<String>;
  locationRestriction_not_contains?: Maybe<String>;
  locationRestriction_starts_with?: Maybe<String>;
  locationRestriction_not_starts_with?: Maybe<String>;
  locationRestriction_ends_with?: Maybe<String>;
  locationRestriction_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GigScalarWhereInput[] | GigScalarWhereInput>;
  OR?: Maybe<GigScalarWhereInput[] | GigScalarWhereInput>;
  NOT?: Maybe<GigScalarWhereInput[] | GigScalarWhereInput>;
}

export interface GigUpdateManyWithWhereNestedInput {
  where: GigScalarWhereInput;
  data: GigUpdateManyDataInput;
}

export interface GigUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  technologies?: Maybe<GigUpdatetechnologiesInput>;
  projectType?: Maybe<ProjectType>;
  paymentType?: Maybe<PaymentType>;
  minFee?: Maybe<Float>;
  maxFee?: Maybe<Float>;
  jobType?: Maybe<JobType>;
  locationRestriction?: Maybe<String>;
}

export interface EmployerUpdateManyMutationInput {
  employerType?: Maybe<EmployerType>;
}

export interface GigCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  technologies?: Maybe<GigCreatetechnologiesInput>;
  projectType: ProjectType;
  paymentType: PaymentType;
  minFee: Float;
  maxFee: Float;
  jobType: JobType;
  locationRestriction?: Maybe<String>;
  employer: EmployerCreateOneWithoutGigsInput;
}

export interface EmployerCreateOneWithoutGigsInput {
  create?: Maybe<EmployerCreateWithoutGigsInput>;
  connect?: Maybe<EmployerWhereUniqueInput>;
}

export interface EmployerCreateWithoutGigsInput {
  id?: Maybe<ID_Input>;
  asUser: UserCreateOneWithoutAsEmployerInput;
  employerType: EmployerType;
}

export interface GigUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  technologies?: Maybe<GigUpdatetechnologiesInput>;
  projectType?: Maybe<ProjectType>;
  paymentType?: Maybe<PaymentType>;
  minFee?: Maybe<Float>;
  maxFee?: Maybe<Float>;
  jobType?: Maybe<JobType>;
  locationRestriction?: Maybe<String>;
  employer?: Maybe<EmployerUpdateOneRequiredWithoutGigsInput>;
}

export interface EmployerUpdateOneRequiredWithoutGigsInput {
  create?: Maybe<EmployerCreateWithoutGigsInput>;
  update?: Maybe<EmployerUpdateWithoutGigsDataInput>;
  upsert?: Maybe<EmployerUpsertWithoutGigsInput>;
  connect?: Maybe<EmployerWhereUniqueInput>;
}

export interface EmployerUpdateWithoutGigsDataInput {
  asUser?: Maybe<UserUpdateOneRequiredWithoutAsEmployerInput>;
  employerType?: Maybe<EmployerType>;
}

export interface EmployerUpsertWithoutGigsInput {
  update: EmployerUpdateWithoutGigsDataInput;
  create: EmployerCreateWithoutGigsInput;
}

export interface GigUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  technologies?: Maybe<GigUpdatetechnologiesInput>;
  projectType?: Maybe<ProjectType>;
  paymentType?: Maybe<PaymentType>;
  minFee?: Maybe<Float>;
  maxFee?: Maybe<Float>;
  jobType?: Maybe<JobType>;
  locationRestriction?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  role: UserRole;
  asEmployer?: Maybe<EmployerCreateOneWithoutAsUserInput>;
}

export interface EmployerCreateOneWithoutAsUserInput {
  create?: Maybe<EmployerCreateWithoutAsUserInput>;
  connect?: Maybe<EmployerWhereUniqueInput>;
}

export interface EmployerCreateWithoutAsUserInput {
  id?: Maybe<ID_Input>;
  employerType: EmployerType;
  gigs?: Maybe<GigCreateManyWithoutEmployerInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
  asEmployer?: Maybe<EmployerUpdateOneWithoutAsUserInput>;
}

export interface EmployerUpdateOneWithoutAsUserInput {
  create?: Maybe<EmployerCreateWithoutAsUserInput>;
  update?: Maybe<EmployerUpdateWithoutAsUserDataInput>;
  upsert?: Maybe<EmployerUpsertWithoutAsUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<EmployerWhereUniqueInput>;
}

export interface EmployerUpdateWithoutAsUserDataInput {
  employerType?: Maybe<EmployerType>;
  gigs?: Maybe<GigUpdateManyWithoutEmployerInput>;
}

export interface EmployerUpsertWithoutAsUserInput {
  update: EmployerUpdateWithoutAsUserDataInput;
  create: EmployerCreateWithoutAsUserInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
}

export interface EmployerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmployerWhereInput>;
  AND?: Maybe<
    EmployerSubscriptionWhereInput[] | EmployerSubscriptionWhereInput
  >;
  OR?: Maybe<EmployerSubscriptionWhereInput[] | EmployerSubscriptionWhereInput>;
  NOT?: Maybe<
    EmployerSubscriptionWhereInput[] | EmployerSubscriptionWhereInput
  >;
}

export interface GigSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GigWhereInput>;
  AND?: Maybe<GigSubscriptionWhereInput[] | GigSubscriptionWhereInput>;
  OR?: Maybe<GigSubscriptionWhereInput[] | GigSubscriptionWhereInput>;
  NOT?: Maybe<GigSubscriptionWhereInput[] | GigSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Employer {
  id: ID_Output;
  employerType: EmployerType;
}

export interface EmployerPromise extends Promise<Employer>, Fragmentable {
  id: () => Promise<ID_Output>;
  asUser: <T = UserPromise>() => T;
  employerType: () => Promise<EmployerType>;
  gigs: <T = FragmentableArray<Gig>>(args?: {
    where?: GigWhereInput;
    orderBy?: GigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EmployerSubscription
  extends Promise<AsyncIterator<Employer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  asUser: <T = UserSubscription>() => T;
  employerType: () => Promise<AsyncIterator<EmployerType>>;
  gigs: <T = Promise<AsyncIterator<GigSubscription>>>(args?: {
    where?: GigWhereInput;
    orderBy?: GigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EmployerNullablePromise
  extends Promise<Employer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  asUser: <T = UserPromise>() => T;
  employerType: () => Promise<EmployerType>;
  gigs: <T = FragmentableArray<Gig>>(args?: {
    where?: GigWhereInput;
    orderBy?: GigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  role: UserRole;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole>;
  createdAt: () => Promise<DateTimeOutput>;
  asEmployer: <T = EmployerPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  asEmployer: <T = EmployerSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole>;
  createdAt: () => Promise<DateTimeOutput>;
  asEmployer: <T = EmployerPromise>() => T;
}

export interface Gig {
  id: ID_Output;
  title: String;
  description: String;
  technologies: String[];
  projectType: ProjectType;
  paymentType: PaymentType;
  minFee: Float;
  maxFee: Float;
  jobType: JobType;
  locationRestriction?: String;
  createdAt: DateTimeOutput;
}

export interface GigPromise extends Promise<Gig>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  technologies: () => Promise<String[]>;
  projectType: () => Promise<ProjectType>;
  paymentType: () => Promise<PaymentType>;
  minFee: () => Promise<Float>;
  maxFee: () => Promise<Float>;
  jobType: () => Promise<JobType>;
  locationRestriction: () => Promise<String>;
  employer: <T = EmployerPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GigSubscription
  extends Promise<AsyncIterator<Gig>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  technologies: () => Promise<AsyncIterator<String[]>>;
  projectType: () => Promise<AsyncIterator<ProjectType>>;
  paymentType: () => Promise<AsyncIterator<PaymentType>>;
  minFee: () => Promise<AsyncIterator<Float>>;
  maxFee: () => Promise<AsyncIterator<Float>>;
  jobType: () => Promise<AsyncIterator<JobType>>;
  locationRestriction: () => Promise<AsyncIterator<String>>;
  employer: <T = EmployerSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GigNullablePromise extends Promise<Gig | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  technologies: () => Promise<String[]>;
  projectType: () => Promise<ProjectType>;
  paymentType: () => Promise<PaymentType>;
  minFee: () => Promise<Float>;
  maxFee: () => Promise<Float>;
  jobType: () => Promise<JobType>;
  locationRestriction: () => Promise<String>;
  employer: <T = EmployerPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EmployerConnection {
  pageInfo: PageInfo;
  edges: EmployerEdge[];
}

export interface EmployerConnectionPromise
  extends Promise<EmployerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmployerEdge>>() => T;
  aggregate: <T = AggregateEmployerPromise>() => T;
}

export interface EmployerConnectionSubscription
  extends Promise<AsyncIterator<EmployerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmployerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmployerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EmployerEdge {
  node: Employer;
  cursor: String;
}

export interface EmployerEdgePromise
  extends Promise<EmployerEdge>,
    Fragmentable {
  node: <T = EmployerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmployerEdgeSubscription
  extends Promise<AsyncIterator<EmployerEdge>>,
    Fragmentable {
  node: <T = EmployerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmployer {
  count: Int;
}

export interface AggregateEmployerPromise
  extends Promise<AggregateEmployer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmployerSubscription
  extends Promise<AsyncIterator<AggregateEmployer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GigConnection {
  pageInfo: PageInfo;
  edges: GigEdge[];
}

export interface GigConnectionPromise
  extends Promise<GigConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GigEdge>>() => T;
  aggregate: <T = AggregateGigPromise>() => T;
}

export interface GigConnectionSubscription
  extends Promise<AsyncIterator<GigConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GigEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGigSubscription>() => T;
}

export interface GigEdge {
  node: Gig;
  cursor: String;
}

export interface GigEdgePromise extends Promise<GigEdge>, Fragmentable {
  node: <T = GigPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GigEdgeSubscription
  extends Promise<AsyncIterator<GigEdge>>,
    Fragmentable {
  node: <T = GigSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGig {
  count: Int;
}

export interface AggregateGigPromise
  extends Promise<AggregateGig>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGigSubscription
  extends Promise<AsyncIterator<AggregateGig>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EmployerSubscriptionPayload {
  mutation: MutationType;
  node: Employer;
  updatedFields: String[];
  previousValues: EmployerPreviousValues;
}

export interface EmployerSubscriptionPayloadPromise
  extends Promise<EmployerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmployerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmployerPreviousValuesPromise>() => T;
}

export interface EmployerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmployerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmployerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmployerPreviousValuesSubscription>() => T;
}

export interface EmployerPreviousValues {
  id: ID_Output;
  employerType: EmployerType;
}

export interface EmployerPreviousValuesPromise
  extends Promise<EmployerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  employerType: () => Promise<EmployerType>;
}

export interface EmployerPreviousValuesSubscription
  extends Promise<AsyncIterator<EmployerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  employerType: () => Promise<AsyncIterator<EmployerType>>;
}

export interface GigSubscriptionPayload {
  mutation: MutationType;
  node: Gig;
  updatedFields: String[];
  previousValues: GigPreviousValues;
}

export interface GigSubscriptionPayloadPromise
  extends Promise<GigSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GigPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GigPreviousValuesPromise>() => T;
}

export interface GigSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GigSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GigSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GigPreviousValuesSubscription>() => T;
}

export interface GigPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  technologies: String[];
  projectType: ProjectType;
  paymentType: PaymentType;
  minFee: Float;
  maxFee: Float;
  jobType: JobType;
  locationRestriction?: String;
  createdAt: DateTimeOutput;
}

export interface GigPreviousValuesPromise
  extends Promise<GigPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  technologies: () => Promise<String[]>;
  projectType: () => Promise<ProjectType>;
  paymentType: () => Promise<PaymentType>;
  minFee: () => Promise<Float>;
  maxFee: () => Promise<Float>;
  jobType: () => Promise<JobType>;
  locationRestriction: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GigPreviousValuesSubscription
  extends Promise<AsyncIterator<GigPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  technologies: () => Promise<AsyncIterator<String[]>>;
  projectType: () => Promise<AsyncIterator<ProjectType>>;
  paymentType: () => Promise<AsyncIterator<PaymentType>>;
  minFee: () => Promise<AsyncIterator<Float>>;
  maxFee: () => Promise<AsyncIterator<Float>>;
  jobType: () => Promise<AsyncIterator<JobType>>;
  locationRestriction: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  role: UserRole;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserRole",
    embedded: false
  },
  {
    name: "Employer",
    embedded: false
  },
  {
    name: "EmployerType",
    embedded: false
  },
  {
    name: "Gig",
    embedded: false
  },
  {
    name: "JobType",
    embedded: false
  },
  {
    name: "PaymentType",
    embedded: false
  },
  {
    name: "ProjectType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;

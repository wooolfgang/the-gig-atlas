module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateEmployer {
  count: Int!
}

type AggregateGig {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Employer {
  id: ID!
  asUser: User!
  employerType: EmployerType!
  gigs(where: GigWhereInput, orderBy: GigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gig!]
}

type EmployerConnection {
  pageInfo: PageInfo!
  edges: [EmployerEdge]!
  aggregate: AggregateEmployer!
}

input EmployerCreateInput {
  id: ID
  asUser: UserCreateOneWithoutAsEmployerInput!
  employerType: EmployerType!
  gigs: GigCreateManyWithoutEmployerInput
}

input EmployerCreateOneWithoutAsUserInput {
  create: EmployerCreateWithoutAsUserInput
  connect: EmployerWhereUniqueInput
}

input EmployerCreateOneWithoutGigsInput {
  create: EmployerCreateWithoutGigsInput
  connect: EmployerWhereUniqueInput
}

input EmployerCreateWithoutAsUserInput {
  id: ID
  employerType: EmployerType!
  gigs: GigCreateManyWithoutEmployerInput
}

input EmployerCreateWithoutGigsInput {
  id: ID
  asUser: UserCreateOneWithoutAsEmployerInput!
  employerType: EmployerType!
}

type EmployerEdge {
  node: Employer!
  cursor: String!
}

enum EmployerOrderByInput {
  id_ASC
  id_DESC
  employerType_ASC
  employerType_DESC
}

type EmployerPreviousValues {
  id: ID!
  employerType: EmployerType!
}

type EmployerSubscriptionPayload {
  mutation: MutationType!
  node: Employer
  updatedFields: [String!]
  previousValues: EmployerPreviousValues
}

input EmployerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmployerWhereInput
  AND: [EmployerSubscriptionWhereInput!]
  OR: [EmployerSubscriptionWhereInput!]
  NOT: [EmployerSubscriptionWhereInput!]
}

enum EmployerType {
  PERSONAL
  COMPANY
}

input EmployerUpdateInput {
  asUser: UserUpdateOneRequiredWithoutAsEmployerInput
  employerType: EmployerType
  gigs: GigUpdateManyWithoutEmployerInput
}

input EmployerUpdateManyMutationInput {
  employerType: EmployerType
}

input EmployerUpdateOneRequiredWithoutGigsInput {
  create: EmployerCreateWithoutGigsInput
  update: EmployerUpdateWithoutGigsDataInput
  upsert: EmployerUpsertWithoutGigsInput
  connect: EmployerWhereUniqueInput
}

input EmployerUpdateOneWithoutAsUserInput {
  create: EmployerCreateWithoutAsUserInput
  update: EmployerUpdateWithoutAsUserDataInput
  upsert: EmployerUpsertWithoutAsUserInput
  delete: Boolean
  disconnect: Boolean
  connect: EmployerWhereUniqueInput
}

input EmployerUpdateWithoutAsUserDataInput {
  employerType: EmployerType
  gigs: GigUpdateManyWithoutEmployerInput
}

input EmployerUpdateWithoutGigsDataInput {
  asUser: UserUpdateOneRequiredWithoutAsEmployerInput
  employerType: EmployerType
}

input EmployerUpsertWithoutAsUserInput {
  update: EmployerUpdateWithoutAsUserDataInput!
  create: EmployerCreateWithoutAsUserInput!
}

input EmployerUpsertWithoutGigsInput {
  update: EmployerUpdateWithoutGigsDataInput!
  create: EmployerCreateWithoutGigsInput!
}

input EmployerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  asUser: UserWhereInput
  employerType: EmployerType
  employerType_not: EmployerType
  employerType_in: [EmployerType!]
  employerType_not_in: [EmployerType!]
  gigs_every: GigWhereInput
  gigs_some: GigWhereInput
  gigs_none: GigWhereInput
  AND: [EmployerWhereInput!]
  OR: [EmployerWhereInput!]
  NOT: [EmployerWhereInput!]
}

input EmployerWhereUniqueInput {
  id: ID
}

type Gig {
  id: ID!
  title: String!
  description: String!
  technologies: [String!]!
  projectType: ProjectType!
  paymentType: PaymentType!
  minFee: Float!
  maxFee: Float!
  jobType: JobType!
  locationRestriction: String
  employer: Employer!
  createdAt: DateTime!
}

type GigConnection {
  pageInfo: PageInfo!
  edges: [GigEdge]!
  aggregate: AggregateGig!
}

input GigCreateInput {
  id: ID
  title: String!
  description: String!
  technologies: GigCreatetechnologiesInput
  projectType: ProjectType!
  paymentType: PaymentType!
  minFee: Float!
  maxFee: Float!
  jobType: JobType!
  locationRestriction: String
  employer: EmployerCreateOneWithoutGigsInput!
}

input GigCreateManyWithoutEmployerInput {
  create: [GigCreateWithoutEmployerInput!]
  connect: [GigWhereUniqueInput!]
}

input GigCreatetechnologiesInput {
  set: [String!]
}

input GigCreateWithoutEmployerInput {
  id: ID
  title: String!
  description: String!
  technologies: GigCreatetechnologiesInput
  projectType: ProjectType!
  paymentType: PaymentType!
  minFee: Float!
  maxFee: Float!
  jobType: JobType!
  locationRestriction: String
}

type GigEdge {
  node: Gig!
  cursor: String!
}

enum GigOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  projectType_ASC
  projectType_DESC
  paymentType_ASC
  paymentType_DESC
  minFee_ASC
  minFee_DESC
  maxFee_ASC
  maxFee_DESC
  jobType_ASC
  jobType_DESC
  locationRestriction_ASC
  locationRestriction_DESC
  createdAt_ASC
  createdAt_DESC
}

type GigPreviousValues {
  id: ID!
  title: String!
  description: String!
  technologies: [String!]!
  projectType: ProjectType!
  paymentType: PaymentType!
  minFee: Float!
  maxFee: Float!
  jobType: JobType!
  locationRestriction: String
  createdAt: DateTime!
}

input GigScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  projectType: ProjectType
  projectType_not: ProjectType
  projectType_in: [ProjectType!]
  projectType_not_in: [ProjectType!]
  paymentType: PaymentType
  paymentType_not: PaymentType
  paymentType_in: [PaymentType!]
  paymentType_not_in: [PaymentType!]
  minFee: Float
  minFee_not: Float
  minFee_in: [Float!]
  minFee_not_in: [Float!]
  minFee_lt: Float
  minFee_lte: Float
  minFee_gt: Float
  minFee_gte: Float
  maxFee: Float
  maxFee_not: Float
  maxFee_in: [Float!]
  maxFee_not_in: [Float!]
  maxFee_lt: Float
  maxFee_lte: Float
  maxFee_gt: Float
  maxFee_gte: Float
  jobType: JobType
  jobType_not: JobType
  jobType_in: [JobType!]
  jobType_not_in: [JobType!]
  locationRestriction: String
  locationRestriction_not: String
  locationRestriction_in: [String!]
  locationRestriction_not_in: [String!]
  locationRestriction_lt: String
  locationRestriction_lte: String
  locationRestriction_gt: String
  locationRestriction_gte: String
  locationRestriction_contains: String
  locationRestriction_not_contains: String
  locationRestriction_starts_with: String
  locationRestriction_not_starts_with: String
  locationRestriction_ends_with: String
  locationRestriction_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [GigScalarWhereInput!]
  OR: [GigScalarWhereInput!]
  NOT: [GigScalarWhereInput!]
}

type GigSubscriptionPayload {
  mutation: MutationType!
  node: Gig
  updatedFields: [String!]
  previousValues: GigPreviousValues
}

input GigSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GigWhereInput
  AND: [GigSubscriptionWhereInput!]
  OR: [GigSubscriptionWhereInput!]
  NOT: [GigSubscriptionWhereInput!]
}

input GigUpdateInput {
  title: String
  description: String
  technologies: GigUpdatetechnologiesInput
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  employer: EmployerUpdateOneRequiredWithoutGigsInput
}

input GigUpdateManyDataInput {
  title: String
  description: String
  technologies: GigUpdatetechnologiesInput
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
}

input GigUpdateManyMutationInput {
  title: String
  description: String
  technologies: GigUpdatetechnologiesInput
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
}

input GigUpdateManyWithoutEmployerInput {
  create: [GigCreateWithoutEmployerInput!]
  delete: [GigWhereUniqueInput!]
  connect: [GigWhereUniqueInput!]
  set: [GigWhereUniqueInput!]
  disconnect: [GigWhereUniqueInput!]
  update: [GigUpdateWithWhereUniqueWithoutEmployerInput!]
  upsert: [GigUpsertWithWhereUniqueWithoutEmployerInput!]
  deleteMany: [GigScalarWhereInput!]
  updateMany: [GigUpdateManyWithWhereNestedInput!]
}

input GigUpdateManyWithWhereNestedInput {
  where: GigScalarWhereInput!
  data: GigUpdateManyDataInput!
}

input GigUpdatetechnologiesInput {
  set: [String!]
}

input GigUpdateWithoutEmployerDataInput {
  title: String
  description: String
  technologies: GigUpdatetechnologiesInput
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
}

input GigUpdateWithWhereUniqueWithoutEmployerInput {
  where: GigWhereUniqueInput!
  data: GigUpdateWithoutEmployerDataInput!
}

input GigUpsertWithWhereUniqueWithoutEmployerInput {
  where: GigWhereUniqueInput!
  update: GigUpdateWithoutEmployerDataInput!
  create: GigCreateWithoutEmployerInput!
}

input GigWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  projectType: ProjectType
  projectType_not: ProjectType
  projectType_in: [ProjectType!]
  projectType_not_in: [ProjectType!]
  paymentType: PaymentType
  paymentType_not: PaymentType
  paymentType_in: [PaymentType!]
  paymentType_not_in: [PaymentType!]
  minFee: Float
  minFee_not: Float
  minFee_in: [Float!]
  minFee_not_in: [Float!]
  minFee_lt: Float
  minFee_lte: Float
  minFee_gt: Float
  minFee_gte: Float
  maxFee: Float
  maxFee_not: Float
  maxFee_in: [Float!]
  maxFee_not_in: [Float!]
  maxFee_lt: Float
  maxFee_lte: Float
  maxFee_gt: Float
  maxFee_gte: Float
  jobType: JobType
  jobType_not: JobType
  jobType_in: [JobType!]
  jobType_not_in: [JobType!]
  locationRestriction: String
  locationRestriction_not: String
  locationRestriction_in: [String!]
  locationRestriction_not_in: [String!]
  locationRestriction_lt: String
  locationRestriction_lte: String
  locationRestriction_gt: String
  locationRestriction_gte: String
  locationRestriction_contains: String
  locationRestriction_not_contains: String
  locationRestriction_starts_with: String
  locationRestriction_not_starts_with: String
  locationRestriction_ends_with: String
  locationRestriction_not_ends_with: String
  employer: EmployerWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [GigWhereInput!]
  OR: [GigWhereInput!]
  NOT: [GigWhereInput!]
}

input GigWhereUniqueInput {
  id: ID
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

scalar Long

type Mutation {
  createEmployer(data: EmployerCreateInput!): Employer!
  updateEmployer(data: EmployerUpdateInput!, where: EmployerWhereUniqueInput!): Employer
  updateManyEmployers(data: EmployerUpdateManyMutationInput!, where: EmployerWhereInput): BatchPayload!
  upsertEmployer(where: EmployerWhereUniqueInput!, create: EmployerCreateInput!, update: EmployerUpdateInput!): Employer!
  deleteEmployer(where: EmployerWhereUniqueInput!): Employer
  deleteManyEmployers(where: EmployerWhereInput): BatchPayload!
  createGig(data: GigCreateInput!): Gig!
  updateGig(data: GigUpdateInput!, where: GigWhereUniqueInput!): Gig
  updateManyGigs(data: GigUpdateManyMutationInput!, where: GigWhereInput): BatchPayload!
  upsertGig(where: GigWhereUniqueInput!, create: GigCreateInput!, update: GigUpdateInput!): Gig!
  deleteGig(where: GigWhereUniqueInput!): Gig
  deleteManyGigs(where: GigWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum PaymentType {
  HOURLY
  FIXED
}

enum ProjectType {
  GREENFIELD
  MAINTENANCE
  CONSULTING
  TESTING
}

type Query {
  employer(where: EmployerWhereUniqueInput!): Employer
  employers(where: EmployerWhereInput, orderBy: EmployerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employer]!
  employersConnection(where: EmployerWhereInput, orderBy: EmployerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployerConnection!
  gig(where: GigWhereUniqueInput!): Gig
  gigs(where: GigWhereInput, orderBy: GigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gig]!
  gigsConnection(where: GigWhereInput, orderBy: GigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GigConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  employer(where: EmployerSubscriptionWhereInput): EmployerSubscriptionPayload
  gig(where: GigSubscriptionWhereInput): GigSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: UserRole!
  createdAt: DateTime!
  asEmployer: Employer
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  role: UserRole!
  asEmployer: EmployerCreateOneWithoutAsUserInput
}

input UserCreateOneWithoutAsEmployerInput {
  create: UserCreateWithoutAsEmployerInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAsEmployerInput {
  id: ID
  name: String!
  email: String!
  password: String!
  role: UserRole!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: UserRole!
  createdAt: DateTime!
}

enum UserRole {
  ADMIN
  MEMBER
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: UserRole
  asEmployer: EmployerUpdateOneWithoutAsUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  role: UserRole
}

input UserUpdateOneRequiredWithoutAsEmployerInput {
  create: UserCreateWithoutAsEmployerInput
  update: UserUpdateWithoutAsEmployerDataInput
  upsert: UserUpsertWithoutAsEmployerInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAsEmployerDataInput {
  name: String
  email: String
  password: String
  role: UserRole
}

input UserUpsertWithoutAsEmployerInput {
  update: UserUpdateWithoutAsEmployerDataInput!
  create: UserCreateWithoutAsEmployerInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  asEmployer: EmployerWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    
module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `enum AccountType {
  FREELANCER
  EMPLOYER
}

type AggregateComment {
  count: Int!
}

type AggregateCommentVote {
  count: Int!
}

type AggregateEmployer {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateFreelancer {
  count: Int!
}

type AggregateGig {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregatePlan {
  count: Int!
}

type AggregatePlanSubscription {
  count: Int!
}

type AggregatePortfolioProject {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateSocial {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateTagCategory {
  count: Int!
}

type AggregateThread {
  count: Int!
}

type AggregateThreadVote {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  isRoot: Boolean!
  isDeleted: Boolean
  upvoteCount: Int!
  downvoteCount: Int!
  children(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  parent: Comment
  thread: Thread!
  postedBy: User!
  votes(where: CommentVoteWhereInput, orderBy: CommentVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommentVote!]
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  isRoot: Boolean!
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  children: CommentCreateManyWithoutParentInput
  parent: CommentCreateOneWithoutChildrenInput
  thread: ThreadCreateOneWithoutCommentsInput!
  postedBy: UserCreateOneWithoutCommentsInput!
  votes: CommentVoteCreateManyWithoutCommentInput
}

input CommentCreateManyWithoutParentInput {
  create: [CommentCreateWithoutParentInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostedByInput {
  create: [CommentCreateWithoutPostedByInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutThreadInput {
  create: [CommentCreateWithoutThreadInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutChildrenInput {
  create: CommentCreateWithoutChildrenInput
  connect: CommentWhereUniqueInput
}

input CommentCreateOneWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutChildrenInput {
  id: ID
  text: String!
  isRoot: Boolean!
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  parent: CommentCreateOneWithoutChildrenInput
  thread: ThreadCreateOneWithoutCommentsInput!
  postedBy: UserCreateOneWithoutCommentsInput!
  votes: CommentVoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutParentInput {
  id: ID
  text: String!
  isRoot: Boolean!
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  children: CommentCreateManyWithoutParentInput
  thread: ThreadCreateOneWithoutCommentsInput!
  postedBy: UserCreateOneWithoutCommentsInput!
  votes: CommentVoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutPostedByInput {
  id: ID
  text: String!
  isRoot: Boolean!
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  children: CommentCreateManyWithoutParentInput
  parent: CommentCreateOneWithoutChildrenInput
  thread: ThreadCreateOneWithoutCommentsInput!
  votes: CommentVoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutThreadInput {
  id: ID
  text: String!
  isRoot: Boolean!
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  children: CommentCreateManyWithoutParentInput
  parent: CommentCreateOneWithoutChildrenInput
  postedBy: UserCreateOneWithoutCommentsInput!
  votes: CommentVoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutVotesInput {
  id: ID
  text: String!
  isRoot: Boolean!
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  children: CommentCreateManyWithoutParentInput
  parent: CommentCreateOneWithoutChildrenInput
  thread: ThreadCreateOneWithoutCommentsInput!
  postedBy: UserCreateOneWithoutCommentsInput!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
  isRoot_ASC
  isRoot_DESC
  isDeleted_ASC
  isDeleted_DESC
  upvoteCount_ASC
  upvoteCount_DESC
  downvoteCount_ASC
  downvoteCount_DESC
}

type CommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  isRoot: Boolean!
  isDeleted: Boolean
  upvoteCount: Int!
  downvoteCount: Int!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  isRoot: Boolean
  isRoot_not: Boolean
  isDeleted: Boolean
  isDeleted_not: Boolean
  upvoteCount: Int
  upvoteCount_not: Int
  upvoteCount_in: [Int!]
  upvoteCount_not_in: [Int!]
  upvoteCount_lt: Int
  upvoteCount_lte: Int
  upvoteCount_gt: Int
  upvoteCount_gte: Int
  downvoteCount: Int
  downvoteCount_not: Int
  downvoteCount_in: [Int!]
  downvoteCount_not_in: [Int!]
  downvoteCount_lt: Int
  downvoteCount_lte: Int
  downvoteCount_gt: Int
  downvoteCount_gte: Int
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  text: String
  isRoot: Boolean
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  children: CommentUpdateManyWithoutParentInput
  parent: CommentUpdateOneWithoutChildrenInput
  thread: ThreadUpdateOneRequiredWithoutCommentsInput
  postedBy: UserUpdateOneRequiredWithoutCommentsInput
  votes: CommentVoteUpdateManyWithoutCommentInput
}

input CommentUpdateManyDataInput {
  text: String
  isRoot: Boolean
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
}

input CommentUpdateManyMutationInput {
  text: String
  isRoot: Boolean
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
}

input CommentUpdateManyWithoutParentInput {
  create: [CommentCreateWithoutParentInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutPostedByInput {
  create: [CommentCreateWithoutPostedByInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutThreadInput {
  create: [CommentCreateWithoutThreadInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutThreadInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutThreadInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneRequiredWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  update: CommentUpdateWithoutVotesDataInput
  upsert: CommentUpsertWithoutVotesInput
  connect: CommentWhereUniqueInput
}

input CommentUpdateOneWithoutChildrenInput {
  create: CommentCreateWithoutChildrenInput
  update: CommentUpdateWithoutChildrenDataInput
  upsert: CommentUpsertWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  connect: CommentWhereUniqueInput
}

input CommentUpdateWithoutChildrenDataInput {
  text: String
  isRoot: Boolean
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  parent: CommentUpdateOneWithoutChildrenInput
  thread: ThreadUpdateOneRequiredWithoutCommentsInput
  postedBy: UserUpdateOneRequiredWithoutCommentsInput
  votes: CommentVoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutParentDataInput {
  text: String
  isRoot: Boolean
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  children: CommentUpdateManyWithoutParentInput
  thread: ThreadUpdateOneRequiredWithoutCommentsInput
  postedBy: UserUpdateOneRequiredWithoutCommentsInput
  votes: CommentVoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutPostedByDataInput {
  text: String
  isRoot: Boolean
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  children: CommentUpdateManyWithoutParentInput
  parent: CommentUpdateOneWithoutChildrenInput
  thread: ThreadUpdateOneRequiredWithoutCommentsInput
  votes: CommentVoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutThreadDataInput {
  text: String
  isRoot: Boolean
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  children: CommentUpdateManyWithoutParentInput
  parent: CommentUpdateOneWithoutChildrenInput
  postedBy: UserUpdateOneRequiredWithoutCommentsInput
  votes: CommentVoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutVotesDataInput {
  text: String
  isRoot: Boolean
  isDeleted: Boolean
  upvoteCount: Int
  downvoteCount: Int
  children: CommentUpdateManyWithoutParentInput
  parent: CommentUpdateOneWithoutChildrenInput
  thread: ThreadUpdateOneRequiredWithoutCommentsInput
  postedBy: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutParentInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutParentDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostedByInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostedByDataInput!
}

input CommentUpdateWithWhereUniqueWithoutThreadInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutThreadDataInput!
}

input CommentUpsertWithoutChildrenInput {
  update: CommentUpdateWithoutChildrenDataInput!
  create: CommentCreateWithoutChildrenInput!
}

input CommentUpsertWithoutVotesInput {
  update: CommentUpdateWithoutVotesDataInput!
  create: CommentCreateWithoutVotesInput!
}

input CommentUpsertWithWhereUniqueWithoutParentInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutParentDataInput!
  create: CommentCreateWithoutParentInput!
}

input CommentUpsertWithWhereUniqueWithoutPostedByInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostedByDataInput!
  create: CommentCreateWithoutPostedByInput!
}

input CommentUpsertWithWhereUniqueWithoutThreadInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutThreadDataInput!
  create: CommentCreateWithoutThreadInput!
}

type CommentVote {
  id: ID!
  createdAt: DateTime!
  user: User!
  value: Int!
  comment: Comment!
}

type CommentVoteConnection {
  pageInfo: PageInfo!
  edges: [CommentVoteEdge]!
  aggregate: AggregateCommentVote!
}

input CommentVoteCreateInput {
  id: ID
  user: UserCreateOneInput!
  value: Int!
  comment: CommentCreateOneWithoutVotesInput!
}

input CommentVoteCreateManyWithoutCommentInput {
  create: [CommentVoteCreateWithoutCommentInput!]
  connect: [CommentVoteWhereUniqueInput!]
}

input CommentVoteCreateWithoutCommentInput {
  id: ID
  user: UserCreateOneInput!
  value: Int!
}

type CommentVoteEdge {
  node: CommentVote!
  cursor: String!
}

enum CommentVoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  value_ASC
  value_DESC
}

type CommentVotePreviousValues {
  id: ID!
  createdAt: DateTime!
  value: Int!
}

input CommentVoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_lt: Int
  value_lte: Int
  value_gt: Int
  value_gte: Int
  AND: [CommentVoteScalarWhereInput!]
  OR: [CommentVoteScalarWhereInput!]
  NOT: [CommentVoteScalarWhereInput!]
}

type CommentVoteSubscriptionPayload {
  mutation: MutationType!
  node: CommentVote
  updatedFields: [String!]
  previousValues: CommentVotePreviousValues
}

input CommentVoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentVoteWhereInput
  AND: [CommentVoteSubscriptionWhereInput!]
  OR: [CommentVoteSubscriptionWhereInput!]
  NOT: [CommentVoteSubscriptionWhereInput!]
}

input CommentVoteUpdateInput {
  user: UserUpdateOneRequiredInput
  value: Int
  comment: CommentUpdateOneRequiredWithoutVotesInput
}

input CommentVoteUpdateManyDataInput {
  value: Int
}

input CommentVoteUpdateManyMutationInput {
  value: Int
}

input CommentVoteUpdateManyWithoutCommentInput {
  create: [CommentVoteCreateWithoutCommentInput!]
  delete: [CommentVoteWhereUniqueInput!]
  connect: [CommentVoteWhereUniqueInput!]
  set: [CommentVoteWhereUniqueInput!]
  disconnect: [CommentVoteWhereUniqueInput!]
  update: [CommentVoteUpdateWithWhereUniqueWithoutCommentInput!]
  upsert: [CommentVoteUpsertWithWhereUniqueWithoutCommentInput!]
  deleteMany: [CommentVoteScalarWhereInput!]
  updateMany: [CommentVoteUpdateManyWithWhereNestedInput!]
}

input CommentVoteUpdateManyWithWhereNestedInput {
  where: CommentVoteScalarWhereInput!
  data: CommentVoteUpdateManyDataInput!
}

input CommentVoteUpdateWithoutCommentDataInput {
  user: UserUpdateOneRequiredInput
  value: Int
}

input CommentVoteUpdateWithWhereUniqueWithoutCommentInput {
  where: CommentVoteWhereUniqueInput!
  data: CommentVoteUpdateWithoutCommentDataInput!
}

input CommentVoteUpsertWithWhereUniqueWithoutCommentInput {
  where: CommentVoteWhereUniqueInput!
  update: CommentVoteUpdateWithoutCommentDataInput!
  create: CommentVoteCreateWithoutCommentInput!
}

input CommentVoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  user: UserWhereInput
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_lt: Int
  value_lte: Int
  value_gt: Int
  value_gte: Int
  comment: CommentWhereInput
  AND: [CommentVoteWhereInput!]
  OR: [CommentVoteWhereInput!]
  NOT: [CommentVoteWhereInput!]
}

input CommentVoteWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  isRoot: Boolean
  isRoot_not: Boolean
  isDeleted: Boolean
  isDeleted_not: Boolean
  upvoteCount: Int
  upvoteCount_not: Int
  upvoteCount_in: [Int!]
  upvoteCount_not_in: [Int!]
  upvoteCount_lt: Int
  upvoteCount_lte: Int
  upvoteCount_gt: Int
  upvoteCount_gte: Int
  downvoteCount: Int
  downvoteCount_not: Int
  downvoteCount_in: [Int!]
  downvoteCount_not_in: [Int!]
  downvoteCount_lt: Int
  downvoteCount_lte: Int
  downvoteCount_gt: Int
  downvoteCount_gte: Int
  children_every: CommentWhereInput
  children_some: CommentWhereInput
  children_none: CommentWhereInput
  parent: CommentWhereInput
  thread: ThreadWhereInput
  postedBy: UserWhereInput
  votes_every: CommentVoteWhereInput
  votes_some: CommentVoteWhereInput
  votes_none: CommentVoteWhereInput
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Employer {
  id: ID!
  displayName: String!
  employerType: EmployerType!
  introduction: String
  email: String
  asUser: User
  gigs(where: GigWhereInput, orderBy: GigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gig!]
  website: String
  avatar: File
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EmployerConnection {
  pageInfo: PageInfo!
  edges: [EmployerEdge]!
  aggregate: AggregateEmployer!
}

input EmployerCreateInput {
  id: ID
  displayName: String!
  employerType: EmployerType!
  introduction: String
  email: String
  asUser: UserCreateOneWithoutAsEmployerInput
  gigs: GigCreateManyWithoutEmployerInput
  website: String
  avatar: FileCreateOneInput
}

input EmployerCreateOneWithoutAsUserInput {
  create: EmployerCreateWithoutAsUserInput
  connect: EmployerWhereUniqueInput
}

input EmployerCreateOneWithoutGigsInput {
  create: EmployerCreateWithoutGigsInput
  connect: EmployerWhereUniqueInput
}

input EmployerCreateWithoutAsUserInput {
  id: ID
  displayName: String!
  employerType: EmployerType!
  introduction: String
  email: String
  gigs: GigCreateManyWithoutEmployerInput
  website: String
  avatar: FileCreateOneInput
}

input EmployerCreateWithoutGigsInput {
  id: ID
  displayName: String!
  employerType: EmployerType!
  introduction: String
  email: String
  asUser: UserCreateOneWithoutAsEmployerInput
  website: String
  avatar: FileCreateOneInput
}

type EmployerEdge {
  node: Employer!
  cursor: String!
}

enum EmployerOrderByInput {
  id_ASC
  id_DESC
  displayName_ASC
  displayName_DESC
  employerType_ASC
  employerType_DESC
  introduction_ASC
  introduction_DESC
  email_ASC
  email_DESC
  website_ASC
  website_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmployerPreviousValues {
  id: ID!
  displayName: String!
  employerType: EmployerType!
  introduction: String
  email: String
  website: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EmployerSubscriptionPayload {
  mutation: MutationType!
  node: Employer
  updatedFields: [String!]
  previousValues: EmployerPreviousValues
}

input EmployerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmployerWhereInput
  AND: [EmployerSubscriptionWhereInput!]
  OR: [EmployerSubscriptionWhereInput!]
  NOT: [EmployerSubscriptionWhereInput!]
}

enum EmployerType {
  PERSONAL
  COMPANY
}

input EmployerUpdateInput {
  displayName: String
  employerType: EmployerType
  introduction: String
  email: String
  asUser: UserUpdateOneWithoutAsEmployerInput
  gigs: GigUpdateManyWithoutEmployerInput
  website: String
  avatar: FileUpdateOneInput
}

input EmployerUpdateManyMutationInput {
  displayName: String
  employerType: EmployerType
  introduction: String
  email: String
  website: String
}

input EmployerUpdateOneWithoutAsUserInput {
  create: EmployerCreateWithoutAsUserInput
  update: EmployerUpdateWithoutAsUserDataInput
  upsert: EmployerUpsertWithoutAsUserInput
  delete: Boolean
  disconnect: Boolean
  connect: EmployerWhereUniqueInput
}

input EmployerUpdateOneWithoutGigsInput {
  create: EmployerCreateWithoutGigsInput
  update: EmployerUpdateWithoutGigsDataInput
  upsert: EmployerUpsertWithoutGigsInput
  delete: Boolean
  disconnect: Boolean
  connect: EmployerWhereUniqueInput
}

input EmployerUpdateWithoutAsUserDataInput {
  displayName: String
  employerType: EmployerType
  introduction: String
  email: String
  gigs: GigUpdateManyWithoutEmployerInput
  website: String
  avatar: FileUpdateOneInput
}

input EmployerUpdateWithoutGigsDataInput {
  displayName: String
  employerType: EmployerType
  introduction: String
  email: String
  asUser: UserUpdateOneWithoutAsEmployerInput
  website: String
  avatar: FileUpdateOneInput
}

input EmployerUpsertWithoutAsUserInput {
  update: EmployerUpdateWithoutAsUserDataInput!
  create: EmployerCreateWithoutAsUserInput!
}

input EmployerUpsertWithoutGigsInput {
  update: EmployerUpdateWithoutGigsDataInput!
  create: EmployerCreateWithoutGigsInput!
}

input EmployerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  employerType: EmployerType
  employerType_not: EmployerType
  employerType_in: [EmployerType!]
  employerType_not_in: [EmployerType!]
  introduction: String
  introduction_not: String
  introduction_in: [String!]
  introduction_not_in: [String!]
  introduction_lt: String
  introduction_lte: String
  introduction_gt: String
  introduction_gte: String
  introduction_contains: String
  introduction_not_contains: String
  introduction_starts_with: String
  introduction_not_starts_with: String
  introduction_ends_with: String
  introduction_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  asUser: UserWhereInput
  gigs_every: GigWhereInput
  gigs_some: GigWhereInput
  gigs_none: GigWhereInput
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  avatar: FileWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [EmployerWhereInput!]
  OR: [EmployerWhereInput!]
  NOT: [EmployerWhereInput!]
}

input EmployerWhereUniqueInput {
  id: ID
}

type File {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  contentType: String
  url: String
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  name: String
  contentType: String
  url: String
}

input FileCreateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  contentType_ASC
  contentType_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  contentType: String
  url: String
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateDataInput {
  name: String
  contentType: String
  url: String
}

input FileUpdateInput {
  name: String
  contentType: String
  url: String
}

input FileUpdateManyDataInput {
  name: String
  contentType: String
  url: String
}

input FileUpdateManyInput {
  create: [FileCreateInput!]
  update: [FileUpdateWithWhereUniqueNestedInput!]
  upsert: [FileUpsertWithWhereUniqueNestedInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyMutationInput {
  name: String
  contentType: String
  url: String
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateOneInput {
  create: FileCreateInput
  update: FileUpdateDataInput
  upsert: FileUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: FileWhereUniqueInput
}

input FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  data: FileUpdateDataInput!
}

input FileUpsertNestedInput {
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

type Freelancer {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  asUser: User
  bio: String
  website: String
  location: String
  timezone: String
  isPrivate: Boolean
  isForHire: Boolean
  skills: [String!]!
  socials(where: SocialWhereInput, orderBy: SocialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Social!]
  portfolio(where: PortfolioProjectWhereInput, orderBy: PortfolioProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PortfolioProject!]
}

type FreelancerConnection {
  pageInfo: PageInfo!
  edges: [FreelancerEdge]!
  aggregate: AggregateFreelancer!
}

input FreelancerCreateInput {
  id: ID
  asUser: UserCreateOneWithoutAsFreelancerInput
  bio: String
  website: String
  location: String
  timezone: String
  isPrivate: Boolean
  isForHire: Boolean
  skills: FreelancerCreateskillsInput
  socials: SocialCreateManyWithoutFreelancerInput
  portfolio: PortfolioProjectCreateManyWithoutFreelancerInput
}

input FreelancerCreateOneWithoutAsUserInput {
  create: FreelancerCreateWithoutAsUserInput
  connect: FreelancerWhereUniqueInput
}

input FreelancerCreateOneWithoutPortfolioInput {
  create: FreelancerCreateWithoutPortfolioInput
  connect: FreelancerWhereUniqueInput
}

input FreelancerCreateOneWithoutSocialsInput {
  create: FreelancerCreateWithoutSocialsInput
  connect: FreelancerWhereUniqueInput
}

input FreelancerCreateskillsInput {
  set: [String!]
}

input FreelancerCreateWithoutAsUserInput {
  id: ID
  bio: String
  website: String
  location: String
  timezone: String
  isPrivate: Boolean
  isForHire: Boolean
  skills: FreelancerCreateskillsInput
  socials: SocialCreateManyWithoutFreelancerInput
  portfolio: PortfolioProjectCreateManyWithoutFreelancerInput
}

input FreelancerCreateWithoutPortfolioInput {
  id: ID
  asUser: UserCreateOneWithoutAsFreelancerInput
  bio: String
  website: String
  location: String
  timezone: String
  isPrivate: Boolean
  isForHire: Boolean
  skills: FreelancerCreateskillsInput
  socials: SocialCreateManyWithoutFreelancerInput
}

input FreelancerCreateWithoutSocialsInput {
  id: ID
  asUser: UserCreateOneWithoutAsFreelancerInput
  bio: String
  website: String
  location: String
  timezone: String
  isPrivate: Boolean
  isForHire: Boolean
  skills: FreelancerCreateskillsInput
  portfolio: PortfolioProjectCreateManyWithoutFreelancerInput
}

type FreelancerEdge {
  node: Freelancer!
  cursor: String!
}

enum FreelancerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  bio_ASC
  bio_DESC
  website_ASC
  website_DESC
  location_ASC
  location_DESC
  timezone_ASC
  timezone_DESC
  isPrivate_ASC
  isPrivate_DESC
  isForHire_ASC
  isForHire_DESC
}

type FreelancerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  bio: String
  website: String
  location: String
  timezone: String
  isPrivate: Boolean
  isForHire: Boolean
  skills: [String!]!
}

type FreelancerSubscriptionPayload {
  mutation: MutationType!
  node: Freelancer
  updatedFields: [String!]
  previousValues: FreelancerPreviousValues
}

input FreelancerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FreelancerWhereInput
  AND: [FreelancerSubscriptionWhereInput!]
  OR: [FreelancerSubscriptionWhereInput!]
  NOT: [FreelancerSubscriptionWhereInput!]
}

input FreelancerUpdateInput {
  asUser: UserUpdateOneWithoutAsFreelancerInput
  bio: String
  website: String
  location: String
  timezone: String
  isPrivate: Boolean
  isForHire: Boolean
  skills: FreelancerUpdateskillsInput
  socials: SocialUpdateManyWithoutFreelancerInput
  portfolio: PortfolioProjectUpdateManyWithoutFreelancerInput
}

input FreelancerUpdateManyMutationInput {
  bio: String
  website: String
  location: String
  timezone: String
  isPrivate: Boolean
  isForHire: Boolean
  skills: FreelancerUpdateskillsInput
}

input FreelancerUpdateOneRequiredWithoutPortfolioInput {
  create: FreelancerCreateWithoutPortfolioInput
  update: FreelancerUpdateWithoutPortfolioDataInput
  upsert: FreelancerUpsertWithoutPortfolioInput
  connect: FreelancerWhereUniqueInput
}

input FreelancerUpdateOneRequiredWithoutSocialsInput {
  create: FreelancerCreateWithoutSocialsInput
  update: FreelancerUpdateWithoutSocialsDataInput
  upsert: FreelancerUpsertWithoutSocialsInput
  connect: FreelancerWhereUniqueInput
}

input FreelancerUpdateOneWithoutAsUserInput {
  create: FreelancerCreateWithoutAsUserInput
  update: FreelancerUpdateWithoutAsUserDataInput
  upsert: FreelancerUpsertWithoutAsUserInput
  delete: Boolean
  disconnect: Boolean
  connect: FreelancerWhereUniqueInput
}

input FreelancerUpdateskillsInput {
  set: [String!]
}

input FreelancerUpdateWithoutAsUserDataInput {
  bio: String
  website: String
  location: String
  timezone: String
  isPrivate: Boolean
  isForHire: Boolean
  skills: FreelancerUpdateskillsInput
  socials: SocialUpdateManyWithoutFreelancerInput
  portfolio: PortfolioProjectUpdateManyWithoutFreelancerInput
}

input FreelancerUpdateWithoutPortfolioDataInput {
  asUser: UserUpdateOneWithoutAsFreelancerInput
  bio: String
  website: String
  location: String
  timezone: String
  isPrivate: Boolean
  isForHire: Boolean
  skills: FreelancerUpdateskillsInput
  socials: SocialUpdateManyWithoutFreelancerInput
}

input FreelancerUpdateWithoutSocialsDataInput {
  asUser: UserUpdateOneWithoutAsFreelancerInput
  bio: String
  website: String
  location: String
  timezone: String
  isPrivate: Boolean
  isForHire: Boolean
  skills: FreelancerUpdateskillsInput
  portfolio: PortfolioProjectUpdateManyWithoutFreelancerInput
}

input FreelancerUpsertWithoutAsUserInput {
  update: FreelancerUpdateWithoutAsUserDataInput!
  create: FreelancerCreateWithoutAsUserInput!
}

input FreelancerUpsertWithoutPortfolioInput {
  update: FreelancerUpdateWithoutPortfolioDataInput!
  create: FreelancerCreateWithoutPortfolioInput!
}

input FreelancerUpsertWithoutSocialsInput {
  update: FreelancerUpdateWithoutSocialsDataInput!
  create: FreelancerCreateWithoutSocialsInput!
}

input FreelancerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  asUser: UserWhereInput
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  timezone: String
  timezone_not: String
  timezone_in: [String!]
  timezone_not_in: [String!]
  timezone_lt: String
  timezone_lte: String
  timezone_gt: String
  timezone_gte: String
  timezone_contains: String
  timezone_not_contains: String
  timezone_starts_with: String
  timezone_not_starts_with: String
  timezone_ends_with: String
  timezone_not_ends_with: String
  isPrivate: Boolean
  isPrivate_not: Boolean
  isForHire: Boolean
  isForHire_not: Boolean
  socials_every: SocialWhereInput
  socials_some: SocialWhereInput
  socials_none: SocialWhereInput
  portfolio_every: PortfolioProjectWhereInput
  portfolio_some: PortfolioProjectWhereInput
  portfolio_none: PortfolioProjectWhereInput
  AND: [FreelancerWhereInput!]
  OR: [FreelancerWhereInput!]
  NOT: [FreelancerWhereInput!]
}

input FreelancerWhereUniqueInput {
  id: ID
}

type Gig {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  employer: Employer
  status: GigStatus
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  media: File
  from: Tag
  fromId: String
}

enum GigCommunicationType {
  EMAIL
  WEBSITE
  IN_APP
}

type GigConnection {
  pageInfo: PageInfo!
  edges: [GigEdge]!
  aggregate: AggregateGig!
}

input GigCreateInput {
  id: ID
  title: String!
  description: String!
  tags: TagCreateManyWithoutGigsInput
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  employer: EmployerCreateOneWithoutGigsInput
  status: GigStatus
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  media: FileCreateOneInput
  from: TagCreateOneInput
  fromId: String
}

input GigCreateManyWithoutEmployerInput {
  create: [GigCreateWithoutEmployerInput!]
  connect: [GigWhereUniqueInput!]
}

input GigCreateManyWithoutTagsInput {
  create: [GigCreateWithoutTagsInput!]
  connect: [GigWhereUniqueInput!]
}

input GigCreateOneInput {
  create: GigCreateInput
  connect: GigWhereUniqueInput
}

input GigCreateWithoutEmployerInput {
  id: ID
  title: String!
  description: String!
  tags: TagCreateManyWithoutGigsInput
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  status: GigStatus
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  media: FileCreateOneInput
  from: TagCreateOneInput
  fromId: String
}

input GigCreateWithoutTagsInput {
  id: ID
  title: String!
  description: String!
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  employer: EmployerCreateOneWithoutGigsInput
  status: GigStatus
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  media: FileCreateOneInput
  from: TagCreateOneInput
  fromId: String
}

type GigEdge {
  node: Gig!
  cursor: String!
}

enum GigOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  projectType_ASC
  projectType_DESC
  paymentType_ASC
  paymentType_DESC
  minFee_ASC
  minFee_DESC
  maxFee_ASC
  maxFee_DESC
  jobType_ASC
  jobType_DESC
  locationRestriction_ASC
  locationRestriction_DESC
  status_ASC
  status_DESC
  communicationType_ASC
  communicationType_DESC
  communicationEmail_ASC
  communicationEmail_DESC
  communicationWebsite_ASC
  communicationWebsite_DESC
  fromId_ASC
  fromId_DESC
}

type GigPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  status: GigStatus
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  fromId: String
}

input GigScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  projectType: ProjectType
  projectType_not: ProjectType
  projectType_in: [ProjectType!]
  projectType_not_in: [ProjectType!]
  paymentType: PaymentType
  paymentType_not: PaymentType
  paymentType_in: [PaymentType!]
  paymentType_not_in: [PaymentType!]
  minFee: Float
  minFee_not: Float
  minFee_in: [Float!]
  minFee_not_in: [Float!]
  minFee_lt: Float
  minFee_lte: Float
  minFee_gt: Float
  minFee_gte: Float
  maxFee: Float
  maxFee_not: Float
  maxFee_in: [Float!]
  maxFee_not_in: [Float!]
  maxFee_lt: Float
  maxFee_lte: Float
  maxFee_gt: Float
  maxFee_gte: Float
  jobType: JobType
  jobType_not: JobType
  jobType_in: [JobType!]
  jobType_not_in: [JobType!]
  locationRestriction: String
  locationRestriction_not: String
  locationRestriction_in: [String!]
  locationRestriction_not_in: [String!]
  locationRestriction_lt: String
  locationRestriction_lte: String
  locationRestriction_gt: String
  locationRestriction_gte: String
  locationRestriction_contains: String
  locationRestriction_not_contains: String
  locationRestriction_starts_with: String
  locationRestriction_not_starts_with: String
  locationRestriction_ends_with: String
  locationRestriction_not_ends_with: String
  status: GigStatus
  status_not: GigStatus
  status_in: [GigStatus!]
  status_not_in: [GigStatus!]
  communicationType: GigCommunicationType
  communicationType_not: GigCommunicationType
  communicationType_in: [GigCommunicationType!]
  communicationType_not_in: [GigCommunicationType!]
  communicationEmail: String
  communicationEmail_not: String
  communicationEmail_in: [String!]
  communicationEmail_not_in: [String!]
  communicationEmail_lt: String
  communicationEmail_lte: String
  communicationEmail_gt: String
  communicationEmail_gte: String
  communicationEmail_contains: String
  communicationEmail_not_contains: String
  communicationEmail_starts_with: String
  communicationEmail_not_starts_with: String
  communicationEmail_ends_with: String
  communicationEmail_not_ends_with: String
  communicationWebsite: String
  communicationWebsite_not: String
  communicationWebsite_in: [String!]
  communicationWebsite_not_in: [String!]
  communicationWebsite_lt: String
  communicationWebsite_lte: String
  communicationWebsite_gt: String
  communicationWebsite_gte: String
  communicationWebsite_contains: String
  communicationWebsite_not_contains: String
  communicationWebsite_starts_with: String
  communicationWebsite_not_starts_with: String
  communicationWebsite_ends_with: String
  communicationWebsite_not_ends_with: String
  fromId: String
  fromId_not: String
  fromId_in: [String!]
  fromId_not_in: [String!]
  fromId_lt: String
  fromId_lte: String
  fromId_gt: String
  fromId_gte: String
  fromId_contains: String
  fromId_not_contains: String
  fromId_starts_with: String
  fromId_not_starts_with: String
  fromId_ends_with: String
  fromId_not_ends_with: String
  AND: [GigScalarWhereInput!]
  OR: [GigScalarWhereInput!]
  NOT: [GigScalarWhereInput!]
}

enum GigStatus {
  SAVED
  POSTED
  REMOVED
}

type GigSubscriptionPayload {
  mutation: MutationType!
  node: Gig
  updatedFields: [String!]
  previousValues: GigPreviousValues
}

input GigSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GigWhereInput
  AND: [GigSubscriptionWhereInput!]
  OR: [GigSubscriptionWhereInput!]
  NOT: [GigSubscriptionWhereInput!]
}

input GigUpdateDataInput {
  title: String
  description: String
  tags: TagUpdateManyWithoutGigsInput
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  employer: EmployerUpdateOneWithoutGigsInput
  status: GigStatus
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  media: FileUpdateOneInput
  from: TagUpdateOneInput
  fromId: String
}

input GigUpdateInput {
  title: String
  description: String
  tags: TagUpdateManyWithoutGigsInput
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  employer: EmployerUpdateOneWithoutGigsInput
  status: GigStatus
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  media: FileUpdateOneInput
  from: TagUpdateOneInput
  fromId: String
}

input GigUpdateManyDataInput {
  title: String
  description: String
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  status: GigStatus
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  fromId: String
}

input GigUpdateManyMutationInput {
  title: String
  description: String
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  status: GigStatus
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  fromId: String
}

input GigUpdateManyWithoutEmployerInput {
  create: [GigCreateWithoutEmployerInput!]
  delete: [GigWhereUniqueInput!]
  connect: [GigWhereUniqueInput!]
  set: [GigWhereUniqueInput!]
  disconnect: [GigWhereUniqueInput!]
  update: [GigUpdateWithWhereUniqueWithoutEmployerInput!]
  upsert: [GigUpsertWithWhereUniqueWithoutEmployerInput!]
  deleteMany: [GigScalarWhereInput!]
  updateMany: [GigUpdateManyWithWhereNestedInput!]
}

input GigUpdateManyWithoutTagsInput {
  create: [GigCreateWithoutTagsInput!]
  delete: [GigWhereUniqueInput!]
  connect: [GigWhereUniqueInput!]
  set: [GigWhereUniqueInput!]
  disconnect: [GigWhereUniqueInput!]
  update: [GigUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [GigUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [GigScalarWhereInput!]
  updateMany: [GigUpdateManyWithWhereNestedInput!]
}

input GigUpdateManyWithWhereNestedInput {
  where: GigScalarWhereInput!
  data: GigUpdateManyDataInput!
}

input GigUpdateOneRequiredInput {
  create: GigCreateInput
  update: GigUpdateDataInput
  upsert: GigUpsertNestedInput
  connect: GigWhereUniqueInput
}

input GigUpdateWithoutEmployerDataInput {
  title: String
  description: String
  tags: TagUpdateManyWithoutGigsInput
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  status: GigStatus
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  media: FileUpdateOneInput
  from: TagUpdateOneInput
  fromId: String
}

input GigUpdateWithoutTagsDataInput {
  title: String
  description: String
  projectType: ProjectType
  paymentType: PaymentType
  minFee: Float
  maxFee: Float
  jobType: JobType
  locationRestriction: String
  employer: EmployerUpdateOneWithoutGigsInput
  status: GigStatus
  communicationType: GigCommunicationType
  communicationEmail: String
  communicationWebsite: String
  media: FileUpdateOneInput
  from: TagUpdateOneInput
  fromId: String
}

input GigUpdateWithWhereUniqueWithoutEmployerInput {
  where: GigWhereUniqueInput!
  data: GigUpdateWithoutEmployerDataInput!
}

input GigUpdateWithWhereUniqueWithoutTagsInput {
  where: GigWhereUniqueInput!
  data: GigUpdateWithoutTagsDataInput!
}

input GigUpsertNestedInput {
  update: GigUpdateDataInput!
  create: GigCreateInput!
}

input GigUpsertWithWhereUniqueWithoutEmployerInput {
  where: GigWhereUniqueInput!
  update: GigUpdateWithoutEmployerDataInput!
  create: GigCreateWithoutEmployerInput!
}

input GigUpsertWithWhereUniqueWithoutTagsInput {
  where: GigWhereUniqueInput!
  update: GigUpdateWithoutTagsDataInput!
  create: GigCreateWithoutTagsInput!
}

input GigWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  projectType: ProjectType
  projectType_not: ProjectType
  projectType_in: [ProjectType!]
  projectType_not_in: [ProjectType!]
  paymentType: PaymentType
  paymentType_not: PaymentType
  paymentType_in: [PaymentType!]
  paymentType_not_in: [PaymentType!]
  minFee: Float
  minFee_not: Float
  minFee_in: [Float!]
  minFee_not_in: [Float!]
  minFee_lt: Float
  minFee_lte: Float
  minFee_gt: Float
  minFee_gte: Float
  maxFee: Float
  maxFee_not: Float
  maxFee_in: [Float!]
  maxFee_not_in: [Float!]
  maxFee_lt: Float
  maxFee_lte: Float
  maxFee_gt: Float
  maxFee_gte: Float
  jobType: JobType
  jobType_not: JobType
  jobType_in: [JobType!]
  jobType_not_in: [JobType!]
  locationRestriction: String
  locationRestriction_not: String
  locationRestriction_in: [String!]
  locationRestriction_not_in: [String!]
  locationRestriction_lt: String
  locationRestriction_lte: String
  locationRestriction_gt: String
  locationRestriction_gte: String
  locationRestriction_contains: String
  locationRestriction_not_contains: String
  locationRestriction_starts_with: String
  locationRestriction_not_starts_with: String
  locationRestriction_ends_with: String
  locationRestriction_not_ends_with: String
  employer: EmployerWhereInput
  status: GigStatus
  status_not: GigStatus
  status_in: [GigStatus!]
  status_not_in: [GigStatus!]
  communicationType: GigCommunicationType
  communicationType_not: GigCommunicationType
  communicationType_in: [GigCommunicationType!]
  communicationType_not_in: [GigCommunicationType!]
  communicationEmail: String
  communicationEmail_not: String
  communicationEmail_in: [String!]
  communicationEmail_not_in: [String!]
  communicationEmail_lt: String
  communicationEmail_lte: String
  communicationEmail_gt: String
  communicationEmail_gte: String
  communicationEmail_contains: String
  communicationEmail_not_contains: String
  communicationEmail_starts_with: String
  communicationEmail_not_starts_with: String
  communicationEmail_ends_with: String
  communicationEmail_not_ends_with: String
  communicationWebsite: String
  communicationWebsite_not: String
  communicationWebsite_in: [String!]
  communicationWebsite_not_in: [String!]
  communicationWebsite_lt: String
  communicationWebsite_lte: String
  communicationWebsite_gt: String
  communicationWebsite_gte: String
  communicationWebsite_contains: String
  communicationWebsite_not_contains: String
  communicationWebsite_starts_with: String
  communicationWebsite_not_starts_with: String
  communicationWebsite_ends_with: String
  communicationWebsite_not_ends_with: String
  media: FileWhereInput
  from: TagWhereInput
  fromId: String
  fromId_not: String
  fromId_in: [String!]
  fromId_not_in: [String!]
  fromId_lt: String
  fromId_lte: String
  fromId_gt: String
  fromId_gte: String
  fromId_contains: String
  fromId_not_contains: String
  fromId_starts_with: String
  fromId_not_starts_with: String
  fromId_ends_with: String
  fromId_not_ends_with: String
  AND: [GigWhereInput!]
  OR: [GigWhereInput!]
  NOT: [GigWhereInput!]
}

input GigWhereUniqueInput {
  id: ID
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createCommentVote(data: CommentVoteCreateInput!): CommentVote!
  updateCommentVote(data: CommentVoteUpdateInput!, where: CommentVoteWhereUniqueInput!): CommentVote
  updateManyCommentVotes(data: CommentVoteUpdateManyMutationInput!, where: CommentVoteWhereInput): BatchPayload!
  upsertCommentVote(where: CommentVoteWhereUniqueInput!, create: CommentVoteCreateInput!, update: CommentVoteUpdateInput!): CommentVote!
  deleteCommentVote(where: CommentVoteWhereUniqueInput!): CommentVote
  deleteManyCommentVotes(where: CommentVoteWhereInput): BatchPayload!
  createEmployer(data: EmployerCreateInput!): Employer!
  updateEmployer(data: EmployerUpdateInput!, where: EmployerWhereUniqueInput!): Employer
  updateManyEmployers(data: EmployerUpdateManyMutationInput!, where: EmployerWhereInput): BatchPayload!
  upsertEmployer(where: EmployerWhereUniqueInput!, create: EmployerCreateInput!, update: EmployerUpdateInput!): Employer!
  deleteEmployer(where: EmployerWhereUniqueInput!): Employer
  deleteManyEmployers(where: EmployerWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createFreelancer(data: FreelancerCreateInput!): Freelancer!
  updateFreelancer(data: FreelancerUpdateInput!, where: FreelancerWhereUniqueInput!): Freelancer
  updateManyFreelancers(data: FreelancerUpdateManyMutationInput!, where: FreelancerWhereInput): BatchPayload!
  upsertFreelancer(where: FreelancerWhereUniqueInput!, create: FreelancerCreateInput!, update: FreelancerUpdateInput!): Freelancer!
  deleteFreelancer(where: FreelancerWhereUniqueInput!): Freelancer
  deleteManyFreelancers(where: FreelancerWhereInput): BatchPayload!
  createGig(data: GigCreateInput!): Gig!
  updateGig(data: GigUpdateInput!, where: GigWhereUniqueInput!): Gig
  updateManyGigs(data: GigUpdateManyMutationInput!, where: GigWhereInput): BatchPayload!
  upsertGig(where: GigWhereUniqueInput!, create: GigCreateInput!, update: GigUpdateInput!): Gig!
  deleteGig(where: GigWhereUniqueInput!): Gig
  deleteManyGigs(where: GigWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createPlan(data: PlanCreateInput!): Plan!
  updatePlan(data: PlanUpdateInput!, where: PlanWhereUniqueInput!): Plan
  updateManyPlans(data: PlanUpdateManyMutationInput!, where: PlanWhereInput): BatchPayload!
  upsertPlan(where: PlanWhereUniqueInput!, create: PlanCreateInput!, update: PlanUpdateInput!): Plan!
  deletePlan(where: PlanWhereUniqueInput!): Plan
  deleteManyPlans(where: PlanWhereInput): BatchPayload!
  createPlanSubscription(data: PlanSubscriptionCreateInput!): PlanSubscription!
  updatePlanSubscription(data: PlanSubscriptionUpdateInput!, where: PlanSubscriptionWhereUniqueInput!): PlanSubscription
  updateManyPlanSubscriptions(data: PlanSubscriptionUpdateManyMutationInput!, where: PlanSubscriptionWhereInput): BatchPayload!
  upsertPlanSubscription(where: PlanSubscriptionWhereUniqueInput!, create: PlanSubscriptionCreateInput!, update: PlanSubscriptionUpdateInput!): PlanSubscription!
  deletePlanSubscription(where: PlanSubscriptionWhereUniqueInput!): PlanSubscription
  deleteManyPlanSubscriptions(where: PlanSubscriptionWhereInput): BatchPayload!
  createPortfolioProject(data: PortfolioProjectCreateInput!): PortfolioProject!
  updatePortfolioProject(data: PortfolioProjectUpdateInput!, where: PortfolioProjectWhereUniqueInput!): PortfolioProject
  updateManyPortfolioProjects(data: PortfolioProjectUpdateManyMutationInput!, where: PortfolioProjectWhereInput): BatchPayload!
  upsertPortfolioProject(where: PortfolioProjectWhereUniqueInput!, create: PortfolioProjectCreateInput!, update: PortfolioProjectUpdateInput!): PortfolioProject!
  deletePortfolioProject(where: PortfolioProjectWhereUniqueInput!): PortfolioProject
  deleteManyPortfolioProjects(where: PortfolioProjectWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createSocial(data: SocialCreateInput!): Social!
  updateSocial(data: SocialUpdateInput!, where: SocialWhereUniqueInput!): Social
  updateManySocials(data: SocialUpdateManyMutationInput!, where: SocialWhereInput): BatchPayload!
  upsertSocial(where: SocialWhereUniqueInput!, create: SocialCreateInput!, update: SocialUpdateInput!): Social!
  deleteSocial(where: SocialWhereUniqueInput!): Social
  deleteManySocials(where: SocialWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createTagCategory(data: TagCategoryCreateInput!): TagCategory!
  updateTagCategory(data: TagCategoryUpdateInput!, where: TagCategoryWhereUniqueInput!): TagCategory
  updateManyTagCategories(data: TagCategoryUpdateManyMutationInput!, where: TagCategoryWhereInput): BatchPayload!
  upsertTagCategory(where: TagCategoryWhereUniqueInput!, create: TagCategoryCreateInput!, update: TagCategoryUpdateInput!): TagCategory!
  deleteTagCategory(where: TagCategoryWhereUniqueInput!): TagCategory
  deleteManyTagCategories(where: TagCategoryWhereInput): BatchPayload!
  createThread(data: ThreadCreateInput!): Thread!
  updateThread(data: ThreadUpdateInput!, where: ThreadWhereUniqueInput!): Thread
  updateManyThreads(data: ThreadUpdateManyMutationInput!, where: ThreadWhereInput): BatchPayload!
  upsertThread(where: ThreadWhereUniqueInput!, create: ThreadCreateInput!, update: ThreadUpdateInput!): Thread!
  deleteThread(where: ThreadWhereUniqueInput!): Thread
  deleteManyThreads(where: ThreadWhereInput): BatchPayload!
  createThreadVote(data: ThreadVoteCreateInput!): ThreadVote!
  updateThreadVote(data: ThreadVoteUpdateInput!, where: ThreadVoteWhereUniqueInput!): ThreadVote
  updateManyThreadVotes(data: ThreadVoteUpdateManyMutationInput!, where: ThreadVoteWhereInput): BatchPayload!
  upsertThreadVote(where: ThreadVoteWhereUniqueInput!, create: ThreadVoteCreateInput!, update: ThreadVoteUpdateInput!): ThreadVote!
  deleteThreadVote(where: ThreadVoteWhereUniqueInput!): ThreadVote
  deleteManyThreadVotes(where: ThreadVoteWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

enum OnboardingStep {
  PERSONAL
  EMPLOYER
  FREELANCER
}

type Order {
  id: ID!
  payer: User!
  serviceRefId: String!
  service: PaymentService!
  status: PaymentStatus!
  cost: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  payer: UserCreateOneInput!
  serviceRefId: String!
  service: PaymentService!
  status: PaymentStatus!
  cost: Float!
}

type OrderEdge {
  node: Order!
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  serviceRefId_ASC
  serviceRefId_DESC
  service_ASC
  service_DESC
  status_ASC
  status_DESC
  cost_ASC
  cost_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  serviceRefId: String!
  service: PaymentService!
  status: PaymentStatus!
  cost: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  payer: UserUpdateOneRequiredInput
  serviceRefId: String
  service: PaymentService
  status: PaymentStatus
  cost: Float
}

input OrderUpdateManyMutationInput {
  serviceRefId: String
  service: PaymentService
  status: PaymentStatus
  cost: Float
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  payer: UserWhereInput
  serviceRefId: String
  serviceRefId_not: String
  serviceRefId_in: [String!]
  serviceRefId_not_in: [String!]
  serviceRefId_lt: String
  serviceRefId_lte: String
  serviceRefId_gt: String
  serviceRefId_gte: String
  serviceRefId_contains: String
  serviceRefId_not_contains: String
  serviceRefId_starts_with: String
  serviceRefId_not_starts_with: String
  serviceRefId_ends_with: String
  serviceRefId_not_ends_with: String
  service: PaymentService
  service_not: PaymentService
  service_in: [PaymentService!]
  service_not_in: [PaymentService!]
  status: PaymentStatus
  status_not: PaymentStatus
  status_in: [PaymentStatus!]
  status_not_in: [PaymentStatus!]
  cost: Float
  cost_not: Float
  cost_in: [Float!]
  cost_not_in: [Float!]
  cost_lt: Float
  cost_lte: Float
  cost_gt: Float
  cost_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
  serviceRefId: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum PaymentService {
  PAYPAL
  STRIPE
}

enum PaymentStatus {
  CREATED
  COMPLETED
}

enum PaymentType {
  HOURLY
  FIXED
}

type Plan {
  id: ID!
  codename: String!
  serviceId: String!
  status: PlanStatus!
  cyclePrice: Float!
  description: String
}

type PlanConnection {
  pageInfo: PageInfo!
  edges: [PlanEdge]!
  aggregate: AggregatePlan!
}

input PlanCreateInput {
  id: ID
  codename: String!
  serviceId: String!
  status: PlanStatus!
  cyclePrice: Float!
  description: String
}

input PlanCreateOneInput {
  create: PlanCreateInput
  connect: PlanWhereUniqueInput
}

type PlanEdge {
  node: Plan!
  cursor: String!
}

enum PlanOrderByInput {
  id_ASC
  id_DESC
  codename_ASC
  codename_DESC
  serviceId_ASC
  serviceId_DESC
  status_ASC
  status_DESC
  cyclePrice_ASC
  cyclePrice_DESC
  description_ASC
  description_DESC
}

type PlanPreviousValues {
  id: ID!
  codename: String!
  serviceId: String!
  status: PlanStatus!
  cyclePrice: Float!
  description: String
}

enum PlanStatus {
  INACTIVE
  ACTIVE
}

type PlanSubscription {
  id: ID!
  subscriber: User!
  serviceId: String!
  service: PaymentService!
  status: SubscriptionStatus!
  gig: Gig!
  plan: Plan!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PlanSubscriptionConnection {
  pageInfo: PageInfo!
  edges: [PlanSubscriptionEdge]!
  aggregate: AggregatePlanSubscription!
}

input PlanSubscriptionCreateInput {
  id: ID
  subscriber: UserCreateOneInput!
  serviceId: String!
  service: PaymentService!
  status: SubscriptionStatus!
  gig: GigCreateOneInput!
  plan: PlanCreateOneInput!
}

type PlanSubscriptionEdge {
  node: PlanSubscription!
  cursor: String!
}

enum PlanSubscriptionOrderByInput {
  id_ASC
  id_DESC
  serviceId_ASC
  serviceId_DESC
  service_ASC
  service_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlanSubscriptionPayload {
  mutation: MutationType!
  node: Plan
  updatedFields: [String!]
  previousValues: PlanPreviousValues
}

type PlanSubscriptionPreviousValues {
  id: ID!
  serviceId: String!
  service: PaymentService!
  status: SubscriptionStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PlanSubscriptionSubscriptionPayload {
  mutation: MutationType!
  node: PlanSubscription
  updatedFields: [String!]
  previousValues: PlanSubscriptionPreviousValues
}

input PlanSubscriptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlanSubscriptionWhereInput
  AND: [PlanSubscriptionSubscriptionWhereInput!]
  OR: [PlanSubscriptionSubscriptionWhereInput!]
  NOT: [PlanSubscriptionSubscriptionWhereInput!]
}

input PlanSubscriptionUpdateInput {
  subscriber: UserUpdateOneRequiredInput
  serviceId: String
  service: PaymentService
  status: SubscriptionStatus
  gig: GigUpdateOneRequiredInput
  plan: PlanUpdateOneRequiredInput
}

input PlanSubscriptionUpdateManyMutationInput {
  serviceId: String
  service: PaymentService
  status: SubscriptionStatus
}

input PlanSubscriptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  subscriber: UserWhereInput
  serviceId: String
  serviceId_not: String
  serviceId_in: [String!]
  serviceId_not_in: [String!]
  serviceId_lt: String
  serviceId_lte: String
  serviceId_gt: String
  serviceId_gte: String
  serviceId_contains: String
  serviceId_not_contains: String
  serviceId_starts_with: String
  serviceId_not_starts_with: String
  serviceId_ends_with: String
  serviceId_not_ends_with: String
  service: PaymentService
  service_not: PaymentService
  service_in: [PaymentService!]
  service_not_in: [PaymentService!]
  status: SubscriptionStatus
  status_not: SubscriptionStatus
  status_in: [SubscriptionStatus!]
  status_not_in: [SubscriptionStatus!]
  gig: GigWhereInput
  plan: PlanWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PlanSubscriptionWhereInput!]
  OR: [PlanSubscriptionWhereInput!]
  NOT: [PlanSubscriptionWhereInput!]
}

input PlanSubscriptionWhereUniqueInput {
  id: ID
  serviceId: String
}

input PlanUpdateDataInput {
  codename: String
  serviceId: String
  status: PlanStatus
  cyclePrice: Float
  description: String
}

input PlanUpdateInput {
  codename: String
  serviceId: String
  status: PlanStatus
  cyclePrice: Float
  description: String
}

input PlanUpdateManyMutationInput {
  codename: String
  serviceId: String
  status: PlanStatus
  cyclePrice: Float
  description: String
}

input PlanUpdateOneRequiredInput {
  create: PlanCreateInput
  update: PlanUpdateDataInput
  upsert: PlanUpsertNestedInput
  connect: PlanWhereUniqueInput
}

input PlanUpsertNestedInput {
  update: PlanUpdateDataInput!
  create: PlanCreateInput!
}

input PlanWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  codename: String
  codename_not: String
  codename_in: [String!]
  codename_not_in: [String!]
  codename_lt: String
  codename_lte: String
  codename_gt: String
  codename_gte: String
  codename_contains: String
  codename_not_contains: String
  codename_starts_with: String
  codename_not_starts_with: String
  codename_ends_with: String
  codename_not_ends_with: String
  serviceId: String
  serviceId_not: String
  serviceId_in: [String!]
  serviceId_not_in: [String!]
  serviceId_lt: String
  serviceId_lte: String
  serviceId_gt: String
  serviceId_gte: String
  serviceId_contains: String
  serviceId_not_contains: String
  serviceId_starts_with: String
  serviceId_not_starts_with: String
  serviceId_ends_with: String
  serviceId_not_ends_with: String
  status: PlanStatus
  status_not: PlanStatus
  status_in: [PlanStatus!]
  status_not_in: [PlanStatus!]
  cyclePrice: Float
  cyclePrice_not: Float
  cyclePrice_in: [Float!]
  cyclePrice_not_in: [Float!]
  cyclePrice_lt: Float
  cyclePrice_lte: Float
  cyclePrice_gt: Float
  cyclePrice_gte: Float
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
}

input PlanWhereUniqueInput {
  id: ID
  codename: String
}

type PortfolioProject {
  id: ID!
  title: String!
  description: String!
  url: String
  avatar: File
  images(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  freelancer: Freelancer!
}

type PortfolioProjectConnection {
  pageInfo: PageInfo!
  edges: [PortfolioProjectEdge]!
  aggregate: AggregatePortfolioProject!
}

input PortfolioProjectCreateInput {
  id: ID
  title: String!
  description: String!
  url: String
  avatar: FileCreateOneInput
  images: FileCreateManyInput
  freelancer: FreelancerCreateOneWithoutPortfolioInput!
}

input PortfolioProjectCreateManyWithoutFreelancerInput {
  create: [PortfolioProjectCreateWithoutFreelancerInput!]
  connect: [PortfolioProjectWhereUniqueInput!]
}

input PortfolioProjectCreateWithoutFreelancerInput {
  id: ID
  title: String!
  description: String!
  url: String
  avatar: FileCreateOneInput
  images: FileCreateManyInput
}

type PortfolioProjectEdge {
  node: PortfolioProject!
  cursor: String!
}

enum PortfolioProjectOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
}

type PortfolioProjectPreviousValues {
  id: ID!
  title: String!
  description: String!
  url: String
}

input PortfolioProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [PortfolioProjectScalarWhereInput!]
  OR: [PortfolioProjectScalarWhereInput!]
  NOT: [PortfolioProjectScalarWhereInput!]
}

type PortfolioProjectSubscriptionPayload {
  mutation: MutationType!
  node: PortfolioProject
  updatedFields: [String!]
  previousValues: PortfolioProjectPreviousValues
}

input PortfolioProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PortfolioProjectWhereInput
  AND: [PortfolioProjectSubscriptionWhereInput!]
  OR: [PortfolioProjectSubscriptionWhereInput!]
  NOT: [PortfolioProjectSubscriptionWhereInput!]
}

input PortfolioProjectUpdateInput {
  title: String
  description: String
  url: String
  avatar: FileUpdateOneInput
  images: FileUpdateManyInput
  freelancer: FreelancerUpdateOneRequiredWithoutPortfolioInput
}

input PortfolioProjectUpdateManyDataInput {
  title: String
  description: String
  url: String
}

input PortfolioProjectUpdateManyMutationInput {
  title: String
  description: String
  url: String
}

input PortfolioProjectUpdateManyWithoutFreelancerInput {
  create: [PortfolioProjectCreateWithoutFreelancerInput!]
  delete: [PortfolioProjectWhereUniqueInput!]
  connect: [PortfolioProjectWhereUniqueInput!]
  set: [PortfolioProjectWhereUniqueInput!]
  disconnect: [PortfolioProjectWhereUniqueInput!]
  update: [PortfolioProjectUpdateWithWhereUniqueWithoutFreelancerInput!]
  upsert: [PortfolioProjectUpsertWithWhereUniqueWithoutFreelancerInput!]
  deleteMany: [PortfolioProjectScalarWhereInput!]
  updateMany: [PortfolioProjectUpdateManyWithWhereNestedInput!]
}

input PortfolioProjectUpdateManyWithWhereNestedInput {
  where: PortfolioProjectScalarWhereInput!
  data: PortfolioProjectUpdateManyDataInput!
}

input PortfolioProjectUpdateWithoutFreelancerDataInput {
  title: String
  description: String
  url: String
  avatar: FileUpdateOneInput
  images: FileUpdateManyInput
}

input PortfolioProjectUpdateWithWhereUniqueWithoutFreelancerInput {
  where: PortfolioProjectWhereUniqueInput!
  data: PortfolioProjectUpdateWithoutFreelancerDataInput!
}

input PortfolioProjectUpsertWithWhereUniqueWithoutFreelancerInput {
  where: PortfolioProjectWhereUniqueInput!
  update: PortfolioProjectUpdateWithoutFreelancerDataInput!
  create: PortfolioProjectCreateWithoutFreelancerInput!
}

input PortfolioProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  avatar: FileWhereInput
  images_every: FileWhereInput
  images_some: FileWhereInput
  images_none: FileWhereInput
  freelancer: FreelancerWhereInput
  AND: [PortfolioProjectWhereInput!]
  OR: [PortfolioProjectWhereInput!]
  NOT: [PortfolioProjectWhereInput!]
}

input PortfolioProjectWhereUniqueInput {
  id: ID
}

type Product {
  id: ID!
  name: String!
  price: Float!
  codename: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  name: String!
  price: Float!
  codename: String!
  description: String
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  codename_ASC
  codename_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  price: Float!
  codename: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  name: String
  price: Float
  codename: String
  description: String
}

input ProductUpdateManyMutationInput {
  name: String
  price: Float
  codename: String
  description: String
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  codename: String
  codename_not: String
  codename_in: [String!]
  codename_not_in: [String!]
  codename_lt: String
  codename_lte: String
  codename_gt: String
  codename_gte: String
  codename_contains: String
  codename_not_contains: String
  codename_starts_with: String
  codename_not_starts_with: String
  codename_ends_with: String
  codename_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
  codename: String
}

enum ProjectType {
  GREENFIELD
  MAINTENANCE
  CONSULTING
  TESTING
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  commentVote(where: CommentVoteWhereUniqueInput!): CommentVote
  commentVotes(where: CommentVoteWhereInput, orderBy: CommentVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommentVote]!
  commentVotesConnection(where: CommentVoteWhereInput, orderBy: CommentVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentVoteConnection!
  employer(where: EmployerWhereUniqueInput!): Employer
  employers(where: EmployerWhereInput, orderBy: EmployerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employer]!
  employersConnection(where: EmployerWhereInput, orderBy: EmployerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployerConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  freelancer(where: FreelancerWhereUniqueInput!): Freelancer
  freelancers(where: FreelancerWhereInput, orderBy: FreelancerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Freelancer]!
  freelancersConnection(where: FreelancerWhereInput, orderBy: FreelancerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FreelancerConnection!
  gig(where: GigWhereUniqueInput!): Gig
  gigs(where: GigWhereInput, orderBy: GigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gig]!
  gigsConnection(where: GigWhereInput, orderBy: GigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GigConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  plan(where: PlanWhereUniqueInput!): Plan
  plans(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plan]!
  plansConnection(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlanConnection!
  planSubscription(where: PlanSubscriptionWhereUniqueInput!): PlanSubscription
  planSubscriptions(where: PlanSubscriptionWhereInput, orderBy: PlanSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlanSubscription]!
  planSubscriptionsConnection(where: PlanSubscriptionWhereInput, orderBy: PlanSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlanSubscriptionConnection!
  portfolioProject(where: PortfolioProjectWhereUniqueInput!): PortfolioProject
  portfolioProjects(where: PortfolioProjectWhereInput, orderBy: PortfolioProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PortfolioProject]!
  portfolioProjectsConnection(where: PortfolioProjectWhereInput, orderBy: PortfolioProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PortfolioProjectConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  social(where: SocialWhereUniqueInput!): Social
  socials(where: SocialWhereInput, orderBy: SocialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Social]!
  socialsConnection(where: SocialWhereInput, orderBy: SocialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  tagCategory(where: TagCategoryWhereUniqueInput!): TagCategory
  tagCategories(where: TagCategoryWhereInput, orderBy: TagCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TagCategory]!
  tagCategoriesConnection(where: TagCategoryWhereInput, orderBy: TagCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagCategoryConnection!
  thread(where: ThreadWhereUniqueInput!): Thread
  threads(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thread]!
  threadsConnection(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThreadConnection!
  threadVote(where: ThreadVoteWhereUniqueInput!): ThreadVote
  threadVotes(where: ThreadVoteWhereInput, orderBy: ThreadVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ThreadVote]!
  threadVotesConnection(where: ThreadVoteWhereInput, orderBy: ThreadVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThreadVoteConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Social {
  id: ID!
  type: SocialType!
  url: String!
  freelancer: Freelancer!
}

type SocialConnection {
  pageInfo: PageInfo!
  edges: [SocialEdge]!
  aggregate: AggregateSocial!
}

input SocialCreateInput {
  id: ID
  type: SocialType!
  url: String!
  freelancer: FreelancerCreateOneWithoutSocialsInput!
}

input SocialCreateManyWithoutFreelancerInput {
  create: [SocialCreateWithoutFreelancerInput!]
  connect: [SocialWhereUniqueInput!]
}

input SocialCreateWithoutFreelancerInput {
  id: ID
  type: SocialType!
  url: String!
}

type SocialEdge {
  node: Social!
  cursor: String!
}

enum SocialOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  url_ASC
  url_DESC
}

type SocialPreviousValues {
  id: ID!
  type: SocialType!
  url: String!
}

input SocialScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: SocialType
  type_not: SocialType
  type_in: [SocialType!]
  type_not_in: [SocialType!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [SocialScalarWhereInput!]
  OR: [SocialScalarWhereInput!]
  NOT: [SocialScalarWhereInput!]
}

type SocialSubscriptionPayload {
  mutation: MutationType!
  node: Social
  updatedFields: [String!]
  previousValues: SocialPreviousValues
}

input SocialSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SocialWhereInput
  AND: [SocialSubscriptionWhereInput!]
  OR: [SocialSubscriptionWhereInput!]
  NOT: [SocialSubscriptionWhereInput!]
}

enum SocialType {
  UPWORK
  GITHUB
  LINKEDIN
  TWITTER
}

input SocialUpdateInput {
  type: SocialType
  url: String
  freelancer: FreelancerUpdateOneRequiredWithoutSocialsInput
}

input SocialUpdateManyDataInput {
  type: SocialType
  url: String
}

input SocialUpdateManyMutationInput {
  type: SocialType
  url: String
}

input SocialUpdateManyWithoutFreelancerInput {
  create: [SocialCreateWithoutFreelancerInput!]
  delete: [SocialWhereUniqueInput!]
  connect: [SocialWhereUniqueInput!]
  set: [SocialWhereUniqueInput!]
  disconnect: [SocialWhereUniqueInput!]
  update: [SocialUpdateWithWhereUniqueWithoutFreelancerInput!]
  upsert: [SocialUpsertWithWhereUniqueWithoutFreelancerInput!]
  deleteMany: [SocialScalarWhereInput!]
  updateMany: [SocialUpdateManyWithWhereNestedInput!]
}

input SocialUpdateManyWithWhereNestedInput {
  where: SocialScalarWhereInput!
  data: SocialUpdateManyDataInput!
}

input SocialUpdateWithoutFreelancerDataInput {
  type: SocialType
  url: String
}

input SocialUpdateWithWhereUniqueWithoutFreelancerInput {
  where: SocialWhereUniqueInput!
  data: SocialUpdateWithoutFreelancerDataInput!
}

input SocialUpsertWithWhereUniqueWithoutFreelancerInput {
  where: SocialWhereUniqueInput!
  update: SocialUpdateWithoutFreelancerDataInput!
  create: SocialCreateWithoutFreelancerInput!
}

input SocialWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: SocialType
  type_not: SocialType
  type_in: [SocialType!]
  type_not_in: [SocialType!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  freelancer: FreelancerWhereInput
  AND: [SocialWhereInput!]
  OR: [SocialWhereInput!]
  NOT: [SocialWhereInput!]
}

input SocialWhereUniqueInput {
  id: ID
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  commentVote(where: CommentVoteSubscriptionWhereInput): CommentVoteSubscriptionPayload
  employer(where: EmployerSubscriptionWhereInput): EmployerSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  freelancer(where: FreelancerSubscriptionWhereInput): FreelancerSubscriptionPayload
  gig(where: GigSubscriptionWhereInput): GigSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  plan(where: PlanSubscriptionWhereInput): PlanSubscriptionPayload
  planSubscription(where: PlanSubscriptionSubscriptionWhereInput): PlanSubscriptionSubscriptionPayload
  portfolioProject(where: PortfolioProjectSubscriptionWhereInput): PortfolioProjectSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  social(where: SocialSubscriptionWhereInput): SocialSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  tagCategory(where: TagCategorySubscriptionWhereInput): TagCategorySubscriptionPayload
  thread(where: ThreadSubscriptionWhereInput): ThreadSubscriptionPayload
  threadVote(where: ThreadVoteSubscriptionWhereInput): ThreadVoteSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

enum SubscriptionStatus {
  CREATED
  APPROVED
  ACTIVE
  SUSPENDED
  CANCELLED
  EXPIRED
}

type Tag {
  id: ID!
  name: String
  threads(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thread!]
  gigs(where: GigWhereInput, orderBy: GigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gig!]
  categories(where: TagCategoryWhereInput, orderBy: TagCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TagCategory!]
}

type TagCategory {
  id: ID!
  name: String
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
}

type TagCategoryConnection {
  pageInfo: PageInfo!
  edges: [TagCategoryEdge]!
  aggregate: AggregateTagCategory!
}

input TagCategoryCreateInput {
  id: ID
  name: String
  tags: TagCreateManyWithoutCategoriesInput
}

input TagCategoryCreateManyWithoutTagsInput {
  create: [TagCategoryCreateWithoutTagsInput!]
  connect: [TagCategoryWhereUniqueInput!]
}

input TagCategoryCreateWithoutTagsInput {
  id: ID
  name: String
}

type TagCategoryEdge {
  node: TagCategory!
  cursor: String!
}

enum TagCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TagCategoryPreviousValues {
  id: ID!
  name: String
}

input TagCategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TagCategoryScalarWhereInput!]
  OR: [TagCategoryScalarWhereInput!]
  NOT: [TagCategoryScalarWhereInput!]
}

type TagCategorySubscriptionPayload {
  mutation: MutationType!
  node: TagCategory
  updatedFields: [String!]
  previousValues: TagCategoryPreviousValues
}

input TagCategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagCategoryWhereInput
  AND: [TagCategorySubscriptionWhereInput!]
  OR: [TagCategorySubscriptionWhereInput!]
  NOT: [TagCategorySubscriptionWhereInput!]
}

input TagCategoryUpdateInput {
  name: String
  tags: TagUpdateManyWithoutCategoriesInput
}

input TagCategoryUpdateManyDataInput {
  name: String
}

input TagCategoryUpdateManyMutationInput {
  name: String
}

input TagCategoryUpdateManyWithoutTagsInput {
  create: [TagCategoryCreateWithoutTagsInput!]
  delete: [TagCategoryWhereUniqueInput!]
  connect: [TagCategoryWhereUniqueInput!]
  set: [TagCategoryWhereUniqueInput!]
  disconnect: [TagCategoryWhereUniqueInput!]
  update: [TagCategoryUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [TagCategoryUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [TagCategoryScalarWhereInput!]
  updateMany: [TagCategoryUpdateManyWithWhereNestedInput!]
}

input TagCategoryUpdateManyWithWhereNestedInput {
  where: TagCategoryScalarWhereInput!
  data: TagCategoryUpdateManyDataInput!
}

input TagCategoryUpdateWithoutTagsDataInput {
  name: String
}

input TagCategoryUpdateWithWhereUniqueWithoutTagsInput {
  where: TagCategoryWhereUniqueInput!
  data: TagCategoryUpdateWithoutTagsDataInput!
}

input TagCategoryUpsertWithWhereUniqueWithoutTagsInput {
  where: TagCategoryWhereUniqueInput!
  update: TagCategoryUpdateWithoutTagsDataInput!
  create: TagCategoryCreateWithoutTagsInput!
}

input TagCategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  AND: [TagCategoryWhereInput!]
  OR: [TagCategoryWhereInput!]
  NOT: [TagCategoryWhereInput!]
}

input TagCategoryWhereUniqueInput {
  id: ID
  name: String
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String
  threads: ThreadCreateManyWithoutTagsInput
  gigs: GigCreateManyWithoutTagsInput
  categories: TagCategoryCreateManyWithoutTagsInput
}

input TagCreateManyWithoutCategoriesInput {
  create: [TagCreateWithoutCategoriesInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateManyWithoutGigsInput {
  create: [TagCreateWithoutGigsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateManyWithoutThreadsInput {
  create: [TagCreateWithoutThreadsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateOneInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
}

input TagCreateWithoutCategoriesInput {
  id: ID
  name: String
  threads: ThreadCreateManyWithoutTagsInput
  gigs: GigCreateManyWithoutTagsInput
}

input TagCreateWithoutGigsInput {
  id: ID
  name: String
  threads: ThreadCreateManyWithoutTagsInput
  categories: TagCategoryCreateManyWithoutTagsInput
}

input TagCreateWithoutThreadsInput {
  id: ID
  name: String
  gigs: GigCreateManyWithoutTagsInput
  categories: TagCategoryCreateManyWithoutTagsInput
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TagPreviousValues {
  id: ID!
  name: String
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateDataInput {
  name: String
  threads: ThreadUpdateManyWithoutTagsInput
  gigs: GigUpdateManyWithoutTagsInput
  categories: TagCategoryUpdateManyWithoutTagsInput
}

input TagUpdateInput {
  name: String
  threads: ThreadUpdateManyWithoutTagsInput
  gigs: GigUpdateManyWithoutTagsInput
  categories: TagCategoryUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  name: String
}

input TagUpdateManyMutationInput {
  name: String
}

input TagUpdateManyWithoutCategoriesInput {
  create: [TagCreateWithoutCategoriesInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutCategoriesInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutCategoriesInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithoutGigsInput {
  create: [TagCreateWithoutGigsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutGigsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutGigsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithoutThreadsInput {
  create: [TagCreateWithoutThreadsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutThreadsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutThreadsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateOneInput {
  create: TagCreateInput
  update: TagUpdateDataInput
  upsert: TagUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TagWhereUniqueInput
}

input TagUpdateWithoutCategoriesDataInput {
  name: String
  threads: ThreadUpdateManyWithoutTagsInput
  gigs: GigUpdateManyWithoutTagsInput
}

input TagUpdateWithoutGigsDataInput {
  name: String
  threads: ThreadUpdateManyWithoutTagsInput
  categories: TagCategoryUpdateManyWithoutTagsInput
}

input TagUpdateWithoutThreadsDataInput {
  name: String
  gigs: GigUpdateManyWithoutTagsInput
  categories: TagCategoryUpdateManyWithoutTagsInput
}

input TagUpdateWithWhereUniqueWithoutCategoriesInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutCategoriesDataInput!
}

input TagUpdateWithWhereUniqueWithoutGigsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutGigsDataInput!
}

input TagUpdateWithWhereUniqueWithoutThreadsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutThreadsDataInput!
}

input TagUpsertNestedInput {
  update: TagUpdateDataInput!
  create: TagCreateInput!
}

input TagUpsertWithWhereUniqueWithoutCategoriesInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutCategoriesDataInput!
  create: TagCreateWithoutCategoriesInput!
}

input TagUpsertWithWhereUniqueWithoutGigsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutGigsDataInput!
  create: TagCreateWithoutGigsInput!
}

input TagUpsertWithWhereUniqueWithoutThreadsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutThreadsDataInput!
  create: TagCreateWithoutThreadsInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  threads_every: ThreadWhereInput
  threads_some: ThreadWhereInput
  threads_none: ThreadWhereInput
  gigs_every: GigWhereInput
  gigs_some: GigWhereInput
  gigs_none: GigWhereInput
  categories_every: TagCategoryWhereInput
  categories_some: TagCategoryWhereInput
  categories_none: TagCategoryWhereInput
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type Thread {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  body: String!
  upvoteCount: Int!
  downvoteCount: Int!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  postedBy: User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  votes(where: ThreadVoteWhereInput, orderBy: ThreadVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ThreadVote!]
}

type ThreadConnection {
  pageInfo: PageInfo!
  edges: [ThreadEdge]!
  aggregate: AggregateThread!
}

input ThreadCreateInput {
  id: ID
  title: String!
  body: String!
  upvoteCount: Int
  downvoteCount: Int
  tags: TagCreateManyWithoutThreadsInput
  postedBy: UserCreateOneWithoutThreadsInput!
  comments: CommentCreateManyWithoutThreadInput
  votes: ThreadVoteCreateManyWithoutThreadInput
}

input ThreadCreateManyWithoutPostedByInput {
  create: [ThreadCreateWithoutPostedByInput!]
  connect: [ThreadWhereUniqueInput!]
}

input ThreadCreateManyWithoutTagsInput {
  create: [ThreadCreateWithoutTagsInput!]
  connect: [ThreadWhereUniqueInput!]
}

input ThreadCreateOneWithoutCommentsInput {
  create: ThreadCreateWithoutCommentsInput
  connect: ThreadWhereUniqueInput
}

input ThreadCreateOneWithoutVotesInput {
  create: ThreadCreateWithoutVotesInput
  connect: ThreadWhereUniqueInput
}

input ThreadCreateWithoutCommentsInput {
  id: ID
  title: String!
  body: String!
  upvoteCount: Int
  downvoteCount: Int
  tags: TagCreateManyWithoutThreadsInput
  postedBy: UserCreateOneWithoutThreadsInput!
  votes: ThreadVoteCreateManyWithoutThreadInput
}

input ThreadCreateWithoutPostedByInput {
  id: ID
  title: String!
  body: String!
  upvoteCount: Int
  downvoteCount: Int
  tags: TagCreateManyWithoutThreadsInput
  comments: CommentCreateManyWithoutThreadInput
  votes: ThreadVoteCreateManyWithoutThreadInput
}

input ThreadCreateWithoutTagsInput {
  id: ID
  title: String!
  body: String!
  upvoteCount: Int
  downvoteCount: Int
  postedBy: UserCreateOneWithoutThreadsInput!
  comments: CommentCreateManyWithoutThreadInput
  votes: ThreadVoteCreateManyWithoutThreadInput
}

input ThreadCreateWithoutVotesInput {
  id: ID
  title: String!
  body: String!
  upvoteCount: Int
  downvoteCount: Int
  tags: TagCreateManyWithoutThreadsInput
  postedBy: UserCreateOneWithoutThreadsInput!
  comments: CommentCreateManyWithoutThreadInput
}

type ThreadEdge {
  node: Thread!
  cursor: String!
}

enum ThreadOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  upvoteCount_ASC
  upvoteCount_DESC
  downvoteCount_ASC
  downvoteCount_DESC
}

type ThreadPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  body: String!
  upvoteCount: Int!
  downvoteCount: Int!
}

input ThreadScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  upvoteCount: Int
  upvoteCount_not: Int
  upvoteCount_in: [Int!]
  upvoteCount_not_in: [Int!]
  upvoteCount_lt: Int
  upvoteCount_lte: Int
  upvoteCount_gt: Int
  upvoteCount_gte: Int
  downvoteCount: Int
  downvoteCount_not: Int
  downvoteCount_in: [Int!]
  downvoteCount_not_in: [Int!]
  downvoteCount_lt: Int
  downvoteCount_lte: Int
  downvoteCount_gt: Int
  downvoteCount_gte: Int
  AND: [ThreadScalarWhereInput!]
  OR: [ThreadScalarWhereInput!]
  NOT: [ThreadScalarWhereInput!]
}

type ThreadSubscriptionPayload {
  mutation: MutationType!
  node: Thread
  updatedFields: [String!]
  previousValues: ThreadPreviousValues
}

input ThreadSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ThreadWhereInput
  AND: [ThreadSubscriptionWhereInput!]
  OR: [ThreadSubscriptionWhereInput!]
  NOT: [ThreadSubscriptionWhereInput!]
}

input ThreadUpdateInput {
  title: String
  body: String
  upvoteCount: Int
  downvoteCount: Int
  tags: TagUpdateManyWithoutThreadsInput
  postedBy: UserUpdateOneRequiredWithoutThreadsInput
  comments: CommentUpdateManyWithoutThreadInput
  votes: ThreadVoteUpdateManyWithoutThreadInput
}

input ThreadUpdateManyDataInput {
  title: String
  body: String
  upvoteCount: Int
  downvoteCount: Int
}

input ThreadUpdateManyMutationInput {
  title: String
  body: String
  upvoteCount: Int
  downvoteCount: Int
}

input ThreadUpdateManyWithoutPostedByInput {
  create: [ThreadCreateWithoutPostedByInput!]
  delete: [ThreadWhereUniqueInput!]
  connect: [ThreadWhereUniqueInput!]
  set: [ThreadWhereUniqueInput!]
  disconnect: [ThreadWhereUniqueInput!]
  update: [ThreadUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [ThreadUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [ThreadScalarWhereInput!]
  updateMany: [ThreadUpdateManyWithWhereNestedInput!]
}

input ThreadUpdateManyWithoutTagsInput {
  create: [ThreadCreateWithoutTagsInput!]
  delete: [ThreadWhereUniqueInput!]
  connect: [ThreadWhereUniqueInput!]
  set: [ThreadWhereUniqueInput!]
  disconnect: [ThreadWhereUniqueInput!]
  update: [ThreadUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [ThreadUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [ThreadScalarWhereInput!]
  updateMany: [ThreadUpdateManyWithWhereNestedInput!]
}

input ThreadUpdateManyWithWhereNestedInput {
  where: ThreadScalarWhereInput!
  data: ThreadUpdateManyDataInput!
}

input ThreadUpdateOneRequiredWithoutCommentsInput {
  create: ThreadCreateWithoutCommentsInput
  update: ThreadUpdateWithoutCommentsDataInput
  upsert: ThreadUpsertWithoutCommentsInput
  connect: ThreadWhereUniqueInput
}

input ThreadUpdateOneRequiredWithoutVotesInput {
  create: ThreadCreateWithoutVotesInput
  update: ThreadUpdateWithoutVotesDataInput
  upsert: ThreadUpsertWithoutVotesInput
  connect: ThreadWhereUniqueInput
}

input ThreadUpdateWithoutCommentsDataInput {
  title: String
  body: String
  upvoteCount: Int
  downvoteCount: Int
  tags: TagUpdateManyWithoutThreadsInput
  postedBy: UserUpdateOneRequiredWithoutThreadsInput
  votes: ThreadVoteUpdateManyWithoutThreadInput
}

input ThreadUpdateWithoutPostedByDataInput {
  title: String
  body: String
  upvoteCount: Int
  downvoteCount: Int
  tags: TagUpdateManyWithoutThreadsInput
  comments: CommentUpdateManyWithoutThreadInput
  votes: ThreadVoteUpdateManyWithoutThreadInput
}

input ThreadUpdateWithoutTagsDataInput {
  title: String
  body: String
  upvoteCount: Int
  downvoteCount: Int
  postedBy: UserUpdateOneRequiredWithoutThreadsInput
  comments: CommentUpdateManyWithoutThreadInput
  votes: ThreadVoteUpdateManyWithoutThreadInput
}

input ThreadUpdateWithoutVotesDataInput {
  title: String
  body: String
  upvoteCount: Int
  downvoteCount: Int
  tags: TagUpdateManyWithoutThreadsInput
  postedBy: UserUpdateOneRequiredWithoutThreadsInput
  comments: CommentUpdateManyWithoutThreadInput
}

input ThreadUpdateWithWhereUniqueWithoutPostedByInput {
  where: ThreadWhereUniqueInput!
  data: ThreadUpdateWithoutPostedByDataInput!
}

input ThreadUpdateWithWhereUniqueWithoutTagsInput {
  where: ThreadWhereUniqueInput!
  data: ThreadUpdateWithoutTagsDataInput!
}

input ThreadUpsertWithoutCommentsInput {
  update: ThreadUpdateWithoutCommentsDataInput!
  create: ThreadCreateWithoutCommentsInput!
}

input ThreadUpsertWithoutVotesInput {
  update: ThreadUpdateWithoutVotesDataInput!
  create: ThreadCreateWithoutVotesInput!
}

input ThreadUpsertWithWhereUniqueWithoutPostedByInput {
  where: ThreadWhereUniqueInput!
  update: ThreadUpdateWithoutPostedByDataInput!
  create: ThreadCreateWithoutPostedByInput!
}

input ThreadUpsertWithWhereUniqueWithoutTagsInput {
  where: ThreadWhereUniqueInput!
  update: ThreadUpdateWithoutTagsDataInput!
  create: ThreadCreateWithoutTagsInput!
}

type ThreadVote {
  id: ID!
  createdAt: DateTime!
  user: User!
  value: Int!
  thread: Thread!
}

type ThreadVoteConnection {
  pageInfo: PageInfo!
  edges: [ThreadVoteEdge]!
  aggregate: AggregateThreadVote!
}

input ThreadVoteCreateInput {
  id: ID
  user: UserCreateOneInput!
  value: Int!
  thread: ThreadCreateOneWithoutVotesInput!
}

input ThreadVoteCreateManyWithoutThreadInput {
  create: [ThreadVoteCreateWithoutThreadInput!]
  connect: [ThreadVoteWhereUniqueInput!]
}

input ThreadVoteCreateWithoutThreadInput {
  id: ID
  user: UserCreateOneInput!
  value: Int!
}

type ThreadVoteEdge {
  node: ThreadVote!
  cursor: String!
}

enum ThreadVoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  value_ASC
  value_DESC
}

type ThreadVotePreviousValues {
  id: ID!
  createdAt: DateTime!
  value: Int!
}

input ThreadVoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_lt: Int
  value_lte: Int
  value_gt: Int
  value_gte: Int
  AND: [ThreadVoteScalarWhereInput!]
  OR: [ThreadVoteScalarWhereInput!]
  NOT: [ThreadVoteScalarWhereInput!]
}

type ThreadVoteSubscriptionPayload {
  mutation: MutationType!
  node: ThreadVote
  updatedFields: [String!]
  previousValues: ThreadVotePreviousValues
}

input ThreadVoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ThreadVoteWhereInput
  AND: [ThreadVoteSubscriptionWhereInput!]
  OR: [ThreadVoteSubscriptionWhereInput!]
  NOT: [ThreadVoteSubscriptionWhereInput!]
}

input ThreadVoteUpdateInput {
  user: UserUpdateOneRequiredInput
  value: Int
  thread: ThreadUpdateOneRequiredWithoutVotesInput
}

input ThreadVoteUpdateManyDataInput {
  value: Int
}

input ThreadVoteUpdateManyMutationInput {
  value: Int
}

input ThreadVoteUpdateManyWithoutThreadInput {
  create: [ThreadVoteCreateWithoutThreadInput!]
  delete: [ThreadVoteWhereUniqueInput!]
  connect: [ThreadVoteWhereUniqueInput!]
  set: [ThreadVoteWhereUniqueInput!]
  disconnect: [ThreadVoteWhereUniqueInput!]
  update: [ThreadVoteUpdateWithWhereUniqueWithoutThreadInput!]
  upsert: [ThreadVoteUpsertWithWhereUniqueWithoutThreadInput!]
  deleteMany: [ThreadVoteScalarWhereInput!]
  updateMany: [ThreadVoteUpdateManyWithWhereNestedInput!]
}

input ThreadVoteUpdateManyWithWhereNestedInput {
  where: ThreadVoteScalarWhereInput!
  data: ThreadVoteUpdateManyDataInput!
}

input ThreadVoteUpdateWithoutThreadDataInput {
  user: UserUpdateOneRequiredInput
  value: Int
}

input ThreadVoteUpdateWithWhereUniqueWithoutThreadInput {
  where: ThreadVoteWhereUniqueInput!
  data: ThreadVoteUpdateWithoutThreadDataInput!
}

input ThreadVoteUpsertWithWhereUniqueWithoutThreadInput {
  where: ThreadVoteWhereUniqueInput!
  update: ThreadVoteUpdateWithoutThreadDataInput!
  create: ThreadVoteCreateWithoutThreadInput!
}

input ThreadVoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  user: UserWhereInput
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_lt: Int
  value_lte: Int
  value_gt: Int
  value_gte: Int
  thread: ThreadWhereInput
  AND: [ThreadVoteWhereInput!]
  OR: [ThreadVoteWhereInput!]
  NOT: [ThreadVoteWhereInput!]
}

input ThreadVoteWhereUniqueInput {
  id: ID
}

input ThreadWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  upvoteCount: Int
  upvoteCount_not: Int
  upvoteCount_in: [Int!]
  upvoteCount_not_in: [Int!]
  upvoteCount_lt: Int
  upvoteCount_lte: Int
  upvoteCount_gt: Int
  upvoteCount_gte: Int
  downvoteCount: Int
  downvoteCount_not: Int
  downvoteCount_in: [Int!]
  downvoteCount_not_in: [Int!]
  downvoteCount_lt: Int
  downvoteCount_lte: Int
  downvoteCount_gt: Int
  downvoteCount_gte: Int
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  postedBy: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  votes_every: ThreadVoteWhereInput
  votes_some: ThreadVoteWhereInput
  votes_none: ThreadVoteWhereInput
  AND: [ThreadWhereInput!]
  OR: [ThreadWhereInput!]
  NOT: [ThreadWhereInput!]
}

input ThreadWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String!
  password: String!
  role: UserRole!
  accountType: AccountType
  createdAt: DateTime!
  avatar: File
  asEmployer: Employer
  asFreelancer: Freelancer
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  threads(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thread!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String
  lastName: String
  email: String!
  password: String!
  role: UserRole
  accountType: AccountType
  avatar: FileCreateOneInput
  asEmployer: EmployerCreateOneWithoutAsUserInput
  asFreelancer: FreelancerCreateOneWithoutAsUserInput
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  threads: ThreadCreateManyWithoutPostedByInput
  comments: CommentCreateManyWithoutPostedByInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAsEmployerInput {
  create: UserCreateWithoutAsEmployerInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAsFreelancerInput {
  create: UserCreateWithoutAsFreelancerInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutThreadsInput {
  create: UserCreateWithoutThreadsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAsEmployerInput {
  id: ID
  firstName: String
  lastName: String
  email: String!
  password: String!
  role: UserRole
  accountType: AccountType
  avatar: FileCreateOneInput
  asFreelancer: FreelancerCreateOneWithoutAsUserInput
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  threads: ThreadCreateManyWithoutPostedByInput
  comments: CommentCreateManyWithoutPostedByInput
}

input UserCreateWithoutAsFreelancerInput {
  id: ID
  firstName: String
  lastName: String
  email: String!
  password: String!
  role: UserRole
  accountType: AccountType
  avatar: FileCreateOneInput
  asEmployer: EmployerCreateOneWithoutAsUserInput
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  threads: ThreadCreateManyWithoutPostedByInput
  comments: CommentCreateManyWithoutPostedByInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  firstName: String
  lastName: String
  email: String!
  password: String!
  role: UserRole
  accountType: AccountType
  avatar: FileCreateOneInput
  asEmployer: EmployerCreateOneWithoutAsUserInput
  asFreelancer: FreelancerCreateOneWithoutAsUserInput
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  threads: ThreadCreateManyWithoutPostedByInput
}

input UserCreateWithoutThreadsInput {
  id: ID
  firstName: String
  lastName: String
  email: String!
  password: String!
  role: UserRole
  accountType: AccountType
  avatar: FileCreateOneInput
  asEmployer: EmployerCreateOneWithoutAsUserInput
  asFreelancer: FreelancerCreateOneWithoutAsUserInput
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  comments: CommentCreateManyWithoutPostedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  accountType_ASC
  accountType_DESC
  createdAt_ASC
  createdAt_DESC
  isEmailVerified_ASC
  isEmailVerified_DESC
  onboardingStep_ASC
  onboardingStep_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String
  lastName: String
  email: String!
  password: String!
  role: UserRole!
  accountType: AccountType
  createdAt: DateTime!
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
}

enum UserRole {
  ADMIN
  MEMBER
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: UserRole
  accountType: AccountType
  avatar: FileUpdateOneInput
  asEmployer: EmployerUpdateOneWithoutAsUserInput
  asFreelancer: FreelancerUpdateOneWithoutAsUserInput
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  threads: ThreadUpdateManyWithoutPostedByInput
  comments: CommentUpdateManyWithoutPostedByInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: UserRole
  accountType: AccountType
  avatar: FileUpdateOneInput
  asEmployer: EmployerUpdateOneWithoutAsUserInput
  asFreelancer: FreelancerUpdateOneWithoutAsUserInput
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  threads: ThreadUpdateManyWithoutPostedByInput
  comments: CommentUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: UserRole
  accountType: AccountType
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutThreadsInput {
  create: UserCreateWithoutThreadsInput
  update: UserUpdateWithoutThreadsDataInput
  upsert: UserUpsertWithoutThreadsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutAsEmployerInput {
  create: UserCreateWithoutAsEmployerInput
  update: UserUpdateWithoutAsEmployerDataInput
  upsert: UserUpsertWithoutAsEmployerInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutAsFreelancerInput {
  create: UserCreateWithoutAsFreelancerInput
  update: UserUpdateWithoutAsFreelancerDataInput
  upsert: UserUpsertWithoutAsFreelancerInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAsEmployerDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: UserRole
  accountType: AccountType
  avatar: FileUpdateOneInput
  asFreelancer: FreelancerUpdateOneWithoutAsUserInput
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  threads: ThreadUpdateManyWithoutPostedByInput
  comments: CommentUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutAsFreelancerDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: UserRole
  accountType: AccountType
  avatar: FileUpdateOneInput
  asEmployer: EmployerUpdateOneWithoutAsUserInput
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  threads: ThreadUpdateManyWithoutPostedByInput
  comments: CommentUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutCommentsDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: UserRole
  accountType: AccountType
  avatar: FileUpdateOneInput
  asEmployer: EmployerUpdateOneWithoutAsUserInput
  asFreelancer: FreelancerUpdateOneWithoutAsUserInput
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  threads: ThreadUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutThreadsDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: UserRole
  accountType: AccountType
  avatar: FileUpdateOneInput
  asEmployer: EmployerUpdateOneWithoutAsUserInput
  asFreelancer: FreelancerUpdateOneWithoutAsUserInput
  isEmailVerified: Boolean
  onboardingStep: OnboardingStep
  comments: CommentUpdateManyWithoutPostedByInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutAsEmployerInput {
  update: UserUpdateWithoutAsEmployerDataInput!
  create: UserCreateWithoutAsEmployerInput!
}

input UserUpsertWithoutAsFreelancerInput {
  update: UserUpdateWithoutAsFreelancerDataInput!
  create: UserCreateWithoutAsFreelancerInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutThreadsInput {
  update: UserUpdateWithoutThreadsDataInput!
  create: UserCreateWithoutThreadsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  accountType: AccountType
  accountType_not: AccountType
  accountType_in: [AccountType!]
  accountType_not_in: [AccountType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  avatar: FileWhereInput
  asEmployer: EmployerWhereInput
  asFreelancer: FreelancerWhereInput
  isEmailVerified: Boolean
  isEmailVerified_not: Boolean
  onboardingStep: OnboardingStep
  onboardingStep_not: OnboardingStep
  onboardingStep_in: [OnboardingStep!]
  onboardingStep_not_in: [OnboardingStep!]
  threads_every: ThreadWhereInput
  threads_some: ThreadWhereInput
  threads_none: ThreadWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    